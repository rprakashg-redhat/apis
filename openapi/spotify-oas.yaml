

openapi: 3.0.1
servers:
  - url: https://api.spotify.com/v1
info:
  title: Spotify Web API
  version: 2021.4.2
  x-apisguru-categories:
    - media
  x-logo:
    url: https://logo-core.clearbit.com/spotify.com
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/sonallux/spotify-web-api/master/spotify-web-api-generator-open-api/spotify-web-api-openapi.yml
      version: "3.0"
  x-providerName: spotify.com
  x-unofficialSpec: true
externalDocs:
  description: Find more info on the official Spotify Web API Reference
  url: https://developer.spotify.com/documentation/web-api/reference
tags:
  - description: Albums API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-albums
    name: category-albums
  - description: Artists API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-artists
    name: category-artists
  - description: Browse API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-browse
    name: category-browse
  - description: Episodes API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-episodes
    name: category-episodes
  - description: Follow API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-follow
    name: category-follow
  - description: Library API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-library
    name: category-library
  - description: Markets API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-markets
    name: category-markets
  - description: Personalization API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-personalization
    name: category-personalization
  - description: Player API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-player
    name: category-player
  - description: Playlists API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-playlists
    name: category-playlists
  - description: Search API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-search
    name: category-search
  - description: Shows API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-shows
    name: category-shows
  - description: Tracks API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-tracks
    name: category-tracks
  - description: Users Profile API
    externalDocs:
      description: Find more info on the official Spotify Web API Reference
      url: https://developer.spotify.com/documentation/web-api/reference/#category-users-profile
    name: category-users-profile
paths:
  /albums:
    get:
      description: Get Spotify catalog information for multiple albums identified by
        their Spotify IDs.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-albums
      operationId: endpoint-get-multiple-albums
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the albums. Maximum: 20 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
        - description: An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            from_token. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumsObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an object whose key is `"albums"` and
            whose value is an array of [album
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-albumobject)
            in JSON format.


            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Multiple Albums
      tags:
        - category-albums
  "/albums/{id}":
    get:
      description: Get Spotify catalog information for a single album.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-album
      operationId: endpoint-get-an-album
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The Spotify ID of the album.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The market you'd like to request. Synonym for `country`.
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumObject"
          description: On success, the HTTP status code in the response header is 200 OK
            and the response body contains an album object in JSON format. On
            error, the header status code is an error code and the response body
            contains an error object.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get an Album
      tags:
        - category-albums
  "/albums/{id}/tracks":
    get:
      description: |-
        Get Spotify catalog information about an album's tracks.
        Optional parameters can be used to limit the number of tracks returned.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks
      operationId: endpoint-get-an-albums-tracks
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The Spotify ID of the album.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            from_token. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: "The maximum number of tracks to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first track to return. Default: 0 (the first
            object). Use with limit to get the next set of tracks."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SimplifiedTrackObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is 200 OK
            and the response body contains an album object in JSON format. On
            error, the header status code is an error code and the response body
            contains an error object.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get an Album's Tracks
      tags:
        - category-albums
  /artists:
    get:
      description: Get Spotify catalog information for several artists based on their
        Spotify IDs.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-artists
      operationId: endpoint-get-multiple-artists
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the artists. Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistsObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an object whose key is `"artists"`
            and whose value is an array of [artist
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)
            in JSON format.


            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Multiple Artists
      tags:
        - category-artists
  "/artists/{id}":
    get:
      description: Get Spotify catalog information for a single artist identified by
        their unique Spotify ID.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artist
      operationId: endpoint-get-an-artist
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The Spotify ID of the artist.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistObject"
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains an [artist
            object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get an Artist
      tags:
        - category-artists
  "/artists/{id}/albums":
    get:
      description: Get Spotify catalog information about an artist's albums.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-albums
      operationId: endpoint-get-an-artists-albums
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the artist.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            A comma-separated list of keywords that will be used to filter the
            response. If not supplied, all album types will be returned. Valid
            values are:  

            - `album`  

            - `single`  

            - `appears_on`  

            - `compilation`  

            For example: `include_groups=album,single`.
          in: query
          name: include_groups
          required: false
          schema:
            type: string
        - description: >-
            Synonym for `country`. An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`.  

            Supply this parameter to limit the response to one particular geographical market. For example, for albums available in Sweden: `market=SE`.  

            *If not given, results will be returned for all markets and you are likely to get duplicate results per album, one for each market in which the album is available!*
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: "The number of album objects to return. Default: 20. Minimum: 1.
            Maximum: 50. For example: `limit=2`"
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first album to return. Default: 0 (i.e., the
            first album). Use with `limit` to get the next set of albums."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SimplifiedAlbumObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of simplified [album
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get an Artist's Albums
      tags:
        - category-artists
  "/artists/{id}/related-artists":
    get:
      description: Get Spotify catalog information about artists similar to a given
        artist. Similarity is based on analysis of the Spotify community's
        [listening
        history](http://news.spotify.com/se/2010/02/03/related-artists/).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-related-artists
      operationId: endpoint-get-an-artists-related-artists
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the artist
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistsObject"
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains an object whose key is `"artists"`
            and whose value is an array of up to 20 [artist
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get an Artist's Related Artists
      tags:
        - category-artists
  "/artists/{id}/top-tracks":
    get:
      description: Get Spotify catalog information about an artist's top tracks by country.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-top-tracks
      operationId: endpoint-get-an-artists-top-tracks
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the artist
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Synonym for `country`.
          in: query
          name: market
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TracksObject"
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains an object whose key is `"tracks"` and
            whose value is an array of up to 10 [track
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get an Artist's Top Tracks
      tags:
        - category-artists
  "/audio-analysis/{id}":
    get:
      description: >-
        Get a detailed audio analysis for a single track identified by its
        unique

        Spotify ID.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-audio-analysis
      operationId: endpoint-get-audio-analysis
      parameters:
        - description: "valid access token from the Spotify Accounts service: see the [Web
            API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AudioAnalysisObject"
          description: On success, the HTTP status code in the response header is `200 OK`
            and the response body contains an audio analysis object in JSON
            format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Audio Analysis for a Track
      tags:
        - category-tracks
  /audio-features:
    get:
      description: Get audio features for multiple tracks based on their Spotify IDs.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-audio-features
      operationId: endpoint-get-several-audio-features
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the tracks. Maximum: 100 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AudioFeaturesArrayObject"
          description: >-
            On success, the HTTP status code in the response header is `200 OK`

            and the response body contains an object whose key is `"audio_features"` and

            whose value is an array of audio features objects in JSON format.


            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Audio Features for Several Tracks
      tags:
        - category-tracks
  "/audio-features/{id}":
    get:
      description: >-
        Get audio feature information for a single track identified by its
        unique

        Spotify ID.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-audio-features
      operationId: endpoint-get-audio-features
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AudioFeaturesObject"
          description: On success, the HTTP status code in the response header is `200 OK`
            and the response body contains an [audio features
            object](https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject)
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Audio Features for a Track
      tags:
        - category-tracks
  /browse/categories:
    get:
      description: Get a list of categories used to tag items in Spotify (on, for
        example, the Spotify player's "Browse" tab).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-categories
      operationId: endpoint-get-categories
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A country: an [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this
            parameter if you want to narrow the list of returned categories to
            those relevant to a particular country. If omitted, the returned
            items will be globally relevant."
          in: query
          name: country
          required: false
          schema:
            type: string
        - description: 'The desired language, consisting of an [ISO
            639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an
            [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an
            underscore. For example: `es_MX`, meaning "Spanish (Mexico)".
            Provide this parameter if you want the category metadata returned in
            a particular language. Note that, if `locale` is not supplied, or if
            the specified language is not available, all strings will be
            returned in the Spotify default language (American English). The
            `locale` parameter, combined with the `country` parameter, may give
            odd results if not carefully matched. For example
            `country=SE&locale=de_DE` will return a list of categories relevant
            to Sweden but as German language strings.'
          in: query
          name: locale
          required: false
          schema:
            type: string
        - description: "The maximum number of categories to return. Default: 20. Minimum:
            1. Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first item to return. Default: 0 (the first
            object). Use with `limit` to get the next set of categories."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriesObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an object with a `categories` field,
            with an array of [category objects](#categoryobject) (wrapped in a
            [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).


            Once you have retrieved the list, you can use [Get a Category](https://developer.spotify.com/web-api/get-category/) to drill down further.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get All Categories
      tags:
        - category-browse
  "/browse/categories/{category_id}":
    get:
      description: Get a single category used to tag items in Spotify (on, for
        example, the Spotify player's "Browse" tab).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-category
      operationId: endpoint-get-a-category
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify category
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the category.
          in: path
          name: category_id
          required: true
          schema:
            type: string
        - description: "A country: an [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this
            parameter to ensure that the category exists for a particular
            country."
          in: query
          name: country
          required: false
          schema:
            type: string
        - description: 'The desired language, consisting of an [ISO
            639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an
            [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an
            underscore. For example: `es_MX`, meaning "Spanish (Mexico)".
            Provide this parameter if you want the category strings returned in
            a particular language. Note that, if `locale` is not supplied, or if
            the specified language is not available, the category strings
            returned will be in the Spotify default language (American
            English).'
          in: query
          name: locale
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a [category object](#categoryobject)
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).


            Once you have retrieved the category, you can use [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) to drill down further.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Category
      tags:
        - category-browse
  "/browse/categories/{category_id}/playlists":
    get:
      description: Get a list of Spotify playlists tagged with a particular category.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-categories-playlists
      operationId: endpoint-get-a-categories-playlists
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify category
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the category.
          in: path
          name: category_id
          required: true
          schema:
            type: string
        - description: "A country: an [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this
            parameter to ensure that the category exists for a particular
            country."
          in: query
          name: country
          required: false
          schema:
            type: string
        - description: "The maximum number of items to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first item to return. Default: 0 (the first
            object). Use with `limit` to get the next set of items."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistPagingObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of simplified [playlist
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).


            Once you have retrieved the list, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Category's Playlists
      tags:
        - category-browse
  /browse/featured-playlists:
    get:
      description: Get a list of Spotify featured playlists (shown, for example, on a
        Spotify player's 'Browse' tab).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-featured-playlists
      operationId: endpoint-get-featured-playlists
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A country: an [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this
            parameter if you want the list of returned items to be relevant to a
            particular country. If omitted, the returned items will be relevant
            to all countries."
          in: query
          name: country
          required: false
          schema:
            type: string
        - description: 'The desired language, consisting of a lowercase [ISO 639-1
            language code](http://en.wikipedia.org/wiki/ISO_639-1) and an
            uppercase [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an
            underscore. For example: `es_MX`, meaning "Spanish (Mexico)".
            Provide this parameter if you want the results returned in a
            particular language (where available). Note that, if `locale` is not
            supplied, or if the specified language is not available, all strings
            will be returned in the Spotify default language (American English).
            The `locale` parameter, combined with the `country` parameter, may
            give odd results if not carefully matched. For example
            `country=SE&locale=de_DE` will return a list of categories relevant
            to Sweden but as German language strings.'
          in: query
          name: locale
          required: false
          schema:
            type: string
        - description: "A timestamp in [ISO 8601
            format](http://en.wikipedia.org/wiki/ISO_8601):
            `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's
            local time to get results tailored for that specific date and time
            in the day. If not provided, the response defaults to the current
            UTC time. Example: \"2014-10-23T09:00:00\" for a user whose local
            time is 9AM. If there were no featured playlists (or there is no
            data) at the specified time, the response will revert to the current
            UTC time."
          in: query
          name: timestamp
          required: false
          schema:
            type: string
        - description: "The maximum number of items to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first item to return. Default: 0 (the first
            object). Use with `limit` to get the next set of items."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeaturedPlaylistObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a `message` and a `playlists` object.
            The `playlists` object contains an array of simplified [playlist
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).


            Once you have retrieved the list of playlist objects, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get All Featured Playlists
      tags:
        - category-browse
  /browse/new-releases:
    get:
      description: Get a list of new album releases featured in Spotify (shown, for
        example, on a Spotify player's "Browse" tab).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-new-releases
      operationId: endpoint-get-new-releases
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A country: an [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this
            parameter if you want the list of returned items to be relevant to a
            particular country. If omitted, the returned items will be relevant
            to all countries."
          in: query
          name: country
          required: false
          schema:
            type: string
        - description: "The maximum number of items to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first item to return. Default: 0 (the first
            object). Use with `limit` to get the next set of items."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewReleasesObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a `message` and an`albums` object.
            The `albums` object contains an array of simplified [album
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).


            Once you have retrieved the list, you can use [Get an Album's Tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks) to drill down further.


            The results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get All New Releases
      tags:
        - category-browse
  /episodes:
    get:
      description: Get Spotify catalog information for several episodes based on their
        Spotify IDs.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-episodes
      operationId: endpoint-get-multiple-episodes
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the episodes. Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a
            country code is specified, only shows and episodes that are
            available in that market will be returned.  

            If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the content is considered unavailable for the client.*   

            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EpisodesObject"
          description: >-
            On success, the HTTP status code in the response header is `200`

            OK and the response body contains an object whose key is `episodes` and whose

            value is an array of [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)

            in JSON format.


            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position.

            Duplicate `ids` in the query will result in duplicate objects in the response. If an episode is unavailable in the given `market`, a `null` value is returned.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Multiple Episodes
      tags:
        - category-episodes
  "/episodes/{id}":
    get:
      description: |-
        Get Spotify catalog information for a single episode identified by its
        unique Spotify ID.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-episode
      operationId: endpoint-get-an-episode
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the episode.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a
            country code is specified, only shows and episodes that are
            available in that market will be returned.  

            If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the content is considered unavailable for the client.*   

            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EpisodeObject"
          description: >-
            On success, the HTTP status code in the response header is `200`

            OK and the response body contains an [episode object](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)

            in JSON format.  


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)

            and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  


            If an episode is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get an Episode
      tags:
        - category-episodes
  /markets:
    get:
      description: Get the list of markets where Spotify is available.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-available-markets
      operationId: endpoint-get-available-markets
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketsObject"
          description: On success, the HTTP status code in the response header is 200 OK
            and the response body contains a list of the countries in which
            Spotify is available, identified by their [ISO 3166-1 alpha-2
            country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) with
            additional country codes for special territories. On error, the
            header status code is an error code and the response body contains
            an error object.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Available Markets
      tags:
        - category-markets
  /me:
    get:
      description: |-
        Get detailed profile information about the current user (including the
        current user's username).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile
      operationId: endpoint-get-current-users-profile
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            current user.  

            Reading the user's email address requires the `user-read-email` scope; reading country, product subscription level and explicit content settings requires the `user-read-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUserObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a [user
            object](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject)
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            When requesting fields that you don't have the user's authorization
            to access, it will return error `403` Forbidden.


            **Important!** If the `user-read-email` scope is authorized, the returned JSON will include the email address that was entered when the user created their Spotify account. **This email address is unverified**; do not assume that the email address belongs to the user.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-read-email
            - user-read-private
      summary: Get Current User's Profile
      tags:
        - category-users-profile
  /me/albums:
    delete:
      description: Remove one or more albums from the current user's 'Your Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-albums-user
      operationId: endpoint-remove-albums-user
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Modification of the current user's "Your Music" collection requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if the IDs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). For example:
            `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50
            IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: >-
                    A JSON array of the [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
                    For example: `["4iV5W9uYEdYUVa79Axb7Rh",
                    "1301WleyT98MSxVHPZCA6M"]`  

                    A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "200":
          description: On success, the HTTP status code in the response header is `200`
            Success. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to remove an album when you do not have the user's
            authorization returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Remove Albums for Current User
      tags:
        - category-library
    get:
      description: Get a list of the albums saved in the current Spotify user's 'Your
        Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-albums
      operationId: endpoint-get-users-saved-albums
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The `user-library-read`
            [scope](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes) must have been authorized by
            the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The maximum number of objects to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first object to return. Default: 0 (i.e., the
            first object). Use with `limit` to get the next set of objects."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SavedAlbumObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of [saved album
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. Each album object is accompanied by a
            [timestamp](https://developer.spotify.com/documentation/web-api/#timestamps)
            (`added_at`) to show when it was added. There is also an **etag** in
            the header that can be used in future [conditional
            requests](https://developer.spotify.com/documentation/web-api/#conditional-requests).


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Get User's Saved Albums
      tags:
        - category-library
    put:
      description: Save one or more albums to the current user's 'Your Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-albums-user
      operationId: endpoint-save-albums-user
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Modification of the current user's "Your Music" collection requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if the IDs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). For example:
            `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50
            IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: >-
                    A JSON array of the [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
                    For example: `["4iV5W9uYEdYUVa79Axb7Rh",
                    "1301WleyT98MSxVHPZCA6M"]`  

                    A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "201":
          description: On success, the HTTP status code in the response header is `201`
            Created. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to add an album when you do not have the user's authorization
            returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Save Albums for Current User
      tags:
        - category-library
  /me/albums/contains:
    get:
      description: Check if one or more albums is already saved in the current Spotify
        user's 'Your Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-albums
      operationId: endpoint-check-users-saved-albums
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The `user-library-read`
            [scope](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes) must have been authorized by
            the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the albums. Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: boolean
                type: array
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a JSON array of `true` or `false`
            values, in the same order in which the `ids` were specified.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Check User's Saved Albums
      tags:
        - category-library
  /me/episodes:
    delete:
      description: >-
        Remove one or more episodes from the current user's library.  


        This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-episodes-user
      operationId: endpoint-remove-episodes-user
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Modification of the current user's collection requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if the IDs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: >-
                    A JSON array of the [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).   

                    A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "200":
          description: On success, the HTTP status code in the response header is `200`
            Success. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to remove an episode when you do not have the user's
            authorization returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Remove User's Saved Episodes
      tags:
        - category-library
    get:
      description: >-
        Get a list of the episodes saved in the current Spotify user's
        library.  


        This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-episodes
      operationId: endpoint-get-users-saved-episodes
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The `user-library-read`
            [scope](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes) must have been authorized by
            the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a
            country code is specified, only episodes that are available in that
            market will be returned.  

            If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the content is considered unavailable for the client.*   

            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: "The maximum number of objects to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first object to return. Default: 0 (i.e., the
            first object). Use with `limit` to get the next set of objects."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SavedEpisodeObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: >-
            - On success, the HTTP status code in the response header is `200`
            OK and the response body contains an array of [saved episode
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).

            - Trying to get more than 2000 episodes for a user will return results for 2000 episodes. Only the 2000 returned episodes are sorted. This limitation will be removed in the near future.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Get User's Saved Episodes
      tags:
        - category-library
    put:
      description: >-
        Save one or more episodes to the current user's library.  


        This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-episodes-user
      operationId: endpoint-save-episodes-user
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Modification of the current user's "Your Music" collection requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if the IDs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: >-
                    A JSON array of the [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).   

                    A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "200":
          description: On success, the HTTP status code in the response header is `200`
            OK. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to add an episode when you do not have the user's
            authorization, returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Save Episodes for User
      tags:
        - category-library
  /me/episodes/contains:
    get:
      description: >-
        Check if one or more episodes is already saved in the current
        Spotify user's 'Your Episodes' library.  


        This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-episodes
      operationId: endpoint-check-users-saved-episodes
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The `user-library-read`
            [scope](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes) must have been authorized by
            the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the episodes. Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: boolean
                type: array
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a JSON array of `true` or `false`
            values, in the same order in which the `ids` were specified.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Check User's Saved Episodes
      tags:
        - category-library
  /me/following:
    delete:
      description: Remove the current user as a follower of one or more artists or
        other Spotify users.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-artists-users
      operationId: endpoint-unfollow-artists-users
      parameters:
        - description: A valid user access token or your client credentials. Requires the
            `user-follow-modify` scope.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if IDs are passed in the request body, otherwise
            ignored* . The content type of the request body:
            `application/json`."
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "The ID type: either `artist` or `user`."
          in: query
          name: type
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the artist or the user [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). For example:
            `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50
            IDs can be sent in one request."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: 'A JSON array of the artist or user [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
                    For example: `{ids:["74ASZWbe4lXaubB36ztrGX",
                    "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent
                    in one request. *Note: if the `ids` parameter is present in
                    the query string, any IDs listed here in the body will be
                    ignored.*'
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "204":
          description: >-
            On success, the HTTP status code in the response header is `204` No
            Content and the response body is empty.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-follow-modify
      summary: Unfollow Artists or Users
      tags:
        - category-follow
    get:
      description: Get the current user's followed artists.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-followed
      operationId: endpoint-get-followed
      parameters:
        - description: A valid user access token or your client credentials. Requires the
            `user-follow-modify` scope.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The ID type: currently only `artist` is supported."
          in: query
          name: type
          required: true
          schema:
            type: string
        - description: The last artist ID retrieved from the previous request.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: "The maximum number of items to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowingArtistsObject"
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an `artists` object.

            The `artists` object in turn contains a [cursor-based paging object](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-follow-modify
      summary: Get User's Followed Artists
      tags:
        - category-follow
    put:
      description: Add the current user as a follower of one or more artists or other
        Spotify users.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-artists-users
      operationId: endpoint-follow-artists-users
      parameters:
        - description: A valid user access token or your client credentials. Requires the
            `user-follow-modify` scope.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if IDs are passed in the request body, otherwise
            ignored* . The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "The ID type: either `artist` or `user`."
          in: query
          name: type
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the artist or the user [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). For example:
            `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50
            IDs can be sent in one request."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: 'A JSON array of the artist or user [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
                    For example: `{ids:["74ASZWbe4lXaubB36ztrGX",
                    "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent
                    in one request. *Note: if the `ids` parameter is present in
                    the query string, any IDs listed here in the body will be
                    ignored.*'
                  items:
                    type: string
                  type: array
              required:
                - ids
              type: object
        required: true
      responses:
        "204":
          description: >-
            On success, the HTTP status code in the response header is `204` No
            Content and the response body is empty.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-follow-modify
      summary: Follow Artists or Users
      tags:
        - category-follow
  /me/following/contains:
    get:
      description: Check to see if the current user is following one or more artists
        or other Spotify users.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-current-user-follows
      operationId: endpoint-check-current-user-follows
      parameters:
        - description: A valid user access token or your client credentials. Requires the
            `user-follow-read` scope.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The ID type: either `artist` or `user`."
          in: query
          name: type
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the artist or the user [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) to check. For example:
            `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A maximum of 50
            IDs can be sent in one request."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: boolean
                type: array
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a JSON array of `true` or `false`
            values, in the same order in which the `ids` were specified.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-follow-read
      summary: Get Following State for Artists/Users
      tags:
        - category-follow
  /me/player:
    get:
      description: Get information about the user's current playback state, including
        track or episode, progress, and active device.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback
      operationId: endpoint-get-information-about-the-users-current-playback
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track

            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: "A comma-separated list of item types that your client supports
            besides the default `track` type. Valid types are: `track` and
            `episode`. An unsupported type in the response is expected to be
            represented as `null` value in the `item` field. **Note**: This
            parameter was introduced to allow existing clients to maintain their
            current behaviour and might be deprecated in the future. In addition
            to providing this parameter, make sure that your client properly
            handles cases of new"
          in: query
          name: additional_types
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentlyPlayingContextObject"
          description: >-
            A successful request will return a `200 OK` response code with a
            json payload that contains information about the current playback.
            The information returned is for the last known state, which means an
            inactive device could be returned if it was the last one to execute
            playback.

            When no available devices are found, the request will return a `200 OK` response but with no data populated.
        "204":
          description: >-
            A successful request will return a `200 OK` response code with a
            json payload that contains information about the current playback.
            The information returned is for the last known state, which means an
            inactive device could be returned if it was the last one to execute
            playback.

            When no available devices are found, the request will return a `200 OK` response but with no data populated.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-read-playback-state
      summary: Get Information About The User's Current Playback
      tags:
        - category-player
    put:
      description: Transfer playback to a new device and determine if it should start
        playing.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-transfer-a-users-playback
      operationId: endpoint-transfer-a-users-playback
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                device_ids:
                  description: >-
                    A JSON array containing the ID of the device on which playback
                    should be started/transferred.  

                    For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`  

                    Note: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`
                  items:
                    type: string
                  type: array
                play:
                  description: |-
                    **true** : ensure playback happens on new device.  
                    **false** or not provided: keep the current playback state.
                  type: boolean
              required:
                - device_ids
              type: object
        required: true
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Transfer a User's Playback
      tags:
        - category-player
  /me/player/currently-playing:
    get:
      description: Get the object currently being played on the user's Spotify account.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-the-users-currently-playing-track
      operationId: endpoint-get-the-users-currently-playing-track
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            issued on behalf of a user. The access token must have the
            `user-read-currently-playing` and/or `user-read-playback-state`
            scope authorized in order to read information."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track

            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: true
          schema:
            type: string
        - description: "A comma-separated list of item types that your client supports
            besides the default `track` type. Valid types are: `track` and
            `episode`. An unsupported type in the response is expected to be
            represented as `null` value in the `item` field. **Note** : This
            parameter was introduced to allow existing clients to maintain their
            current behaviour and might be deprecated in the future. In addition
            to providing this parameter, make sure that your client properly
            handles cases of new types in the future by checking against the
            `currently_playing_type` field."
          in: query
          name: additional_types
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentlyPlayingObject"
          description: >-
            A successful request will return a `200 OK` response code with a
            json payload that contains information about the currently playing
            track or episode and its context (see below). The information
            returned is for the last known state, which means an inactive device
            could be returned if it was the last one to execute playback.


            When no available devices are found, the request will return a `200 OK` response but with no data populated.


            When no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.


            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
        "204":
          description: >-
            A successful request will return a `200 OK` response code with a
            json payload that contains information about the currently playing
            track or episode and its context (see below). The information
            returned is for the last known state, which means an inactive device
            could be returned if it was the last one to execute playback.


            When no available devices are found, the request will return a `200 OK` response but with no data populated.


            When no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.


            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-read-currently-playing
            - user-read-playback-state
      summary: Get the User's Currently Playing Track
      tags:
        - category-player
  /me/player/devices:
    get:
      description: Get information about a user's available devices.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-users-available-devices
      operationId: endpoint-get-a-users-available-devices
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            issued on behalf of a user. The access token must have the
            `user-read-playback-state` scope authorized in order to read
            information."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DevicesObject"
          description: >-
            A successful request will return a `200 OK` response code with a
            json payload that contains the device objects (see below).

            When no available devices are found, the request will return a 200 OK response with an empty devices list.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-read-playback-state
      summary: Get a User's Available Devices
      tags:
        - category-player
  /me/player/next:
    post:
      description: Skips to next track in the user's queue.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-next-track
      operationId: endpoint-skip-users-playback-to-next-track
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Skip User’s Playback To Next Track
      tags:
        - category-player
  /me/player/pause:
    put:
      description: Pause playback on the user's account.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-pause-a-users-playback
      operationId: endpoint-pause-a-users-playback
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Pause a User's Playback
      tags:
        - category-player
  /me/player/play:
    put:
      description: Start a new context or resume current playback on the user's active
        device.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-start-a-users-playback
      operationId: endpoint-start-a-users-playback
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                context_uri:
                  description: 'Spotify URI of the context to play. Valid contexts are albums,
                    artists, playlists. Example: {"context_uri":
                    "spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}'
                  type: string
                offset:
                  description: 'Indicates from where in the context playback should start. Only
                    available when context_uri corresponds to an album or
                    playlist object, or when the uris parameter is used.
                    “position” is zero based and can’t be negative. Example:
                    "offset": {"position": 5} “uri” is a string representing the
                    uri of the item to start at. Example: "offset": {"uri":
                    "spotify:track:1301WleyT98MSxVHPZCA6M"}'
                  type: object
                position_ms:
                  description: Indicates from what position to start playback. Must be a positive
                    number. Passing in a position that is greater than the
                    length of the track will cause the player to start playing
                    the next song.
                  format: int32
                  type: integer
                uris:
                  description: 'A JSON array of the Spotify track URIs to play. For example:
                    {"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh",
                    "spotify:track:1301WleyT98MSxVHPZCA6M"]}'
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Start/Resume a User's Playback
      tags:
        - category-player
  /me/player/previous:
    post:
      description: Skips to previous track in the user's queue.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-previous-track
      operationId: endpoint-skip-users-playback-to-previous-track
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Skip User’s Playback To Previous Track
      tags:
        - category-player
  /me/player/queue:
    post:
      description: Add an item to the end of the user's current playback queue.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-to-queue
      operationId: endpoint-add-to-queue
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The uri of the item to add to the queue. Must be a track or an
            episode uri.
          in: query
          name: uri
          required: true
          schema:
            type: string
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Add an item to queue
      tags:
        - category-player
  /me/player/recently-played:
    get:
      description: |-
        Get tracks from the current user's recently played tracks.
        *Note: Currently doesn't support podcast episodes.*
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recently-played
      operationId: endpoint-get-recently-played
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            issued on behalf of a user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The maximum number of items to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: A Unix timestamp in milliseconds. Returns all items after (but not
            including) this cursor position. If `after` is specified, `before`
            must not be specified.
          in: query
          name: after
          required: false
          schema:
            format: int32
            type: integer
        - description: A Unix timestamp in milliseconds. Returns all items before (but not
            including) this cursor position. If `before` is specified, `after`
            must not be specified.
          in: query
          name: before
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject
                properties:
                  cursors:
                    $ref: "#/components/schemas/CursorObject"
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request.
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/PlayHistoryObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of [play history
            objects](#play-history-object) (wrapped in a [cursor-based paging
            object](#cursor-based-paging-object)) in JSON format. The play
            history items each contain the context the track was played from
            (e.g. playlist, album), the date and time the track was played, and
            a [track object
            (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject).
            On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).


            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
        "204":
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of [play history
            objects](#play-history-object) (wrapped in a [cursor-based paging
            object](#cursor-based-paging-object)) in JSON format. The play
            history items each contain the context the track was played from
            (e.g. playlist, album), the date and time the track was played, and
            a [track object
            (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject).
            On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).


            If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Current User's Recently Played Tracks
      tags:
        - category-player
  /me/player/repeat:
    put:
      description: |-
        Set the repeat mode for the user's playback. Options are repeat-track,
        repeat-context, and off.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-repeat-mode-on-users-playback
      operationId: endpoint-set-repeat-mode-on-users-playback
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: |-
            **track** , **context** or **off** .  
            **track** will repeat the current track.  
            **context** will repeat the current context.  
            **off** will turn repeat off.
          in: query
          name: state
          required: true
          schema:
            type: string
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Set Repeat Mode On User’s Playback
      tags:
        - category-player
  /me/player/seek:
    put:
      description: Seeks to the given position in the user's currently playing track.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-seek-to-position-in-currently-playing-track
      operationId: endpoint-seek-to-position-in-currently-playing-track
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The position in milliseconds to seek to. Must be a positive number.
            Passing in a position that is greater than the length of the track
            will cause the player to start playing the next song.
          in: query
          name: position_ms
          required: true
          schema:
            format: int32
            type: integer
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Seek To Position In Currently Playing Track
      tags:
        - category-player
  /me/player/shuffle:
    put:
      description: Toggle shuffle on or off for user's playback.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-toggle-shuffle-for-users-playback
      operationId: endpoint-toggle-shuffle-for-users-playback
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: |-
            **true** : Shuffle user's playback.  
            **false** : Do not shuffle user's playback.
          in: query
          name: state
          required: true
          schema:
            type: boolean
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Toggle Shuffle For User’s Playback
      tags:
        - category-player
  /me/player/volume:
    put:
      description: Set the volume for the user's current playback device.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-volume-for-users-playback
      operationId: endpoint-set-volume-for-users-playback
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            The access token must have been issued on behalf of a user.  

            The access token must have the `user-modify-playback-state` scope authorized in order to control playback.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The volume to set. Must be a value from 0 to 100 inclusive.
          in: query
          name: volume_percent
          required: true
          schema:
            format: int32
            type: integer
        - description: The id of the device this command is targeting. If not supplied,
            the user's currently active device is the target.
          in: query
          name: device_id
          required: false
          schema:
            type: string
      responses:
        "204":
          description: >-
            A completed request will return a `204 NO CONTENT` response code,
            and then issue the command to the player. Due to the asynchronous
            nature of the issuance of the command, you should use the [Get
            Information About The User's Current
            Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
            endpoint to check that your issued command was handled correctly by
            the player.


            If the device is not found, the request will return `404 NOT FOUND` response code.


            If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-modify-playback-state
      summary: Set Volume For User's Playback
      tags:
        - category-player
  /me/playlists:
    get:
      description: |-
        Get a list of the playlists owned or followed by the current Spotify
        user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists
      operationId: endpoint-get-a-list-of-current-users-playlists
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Private playlists are only retrievable *for the current user* and requires the `playlist-read-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) to have been authorized by the user. Note that this scope alone will not return collaborative playlists, even though they are always private.  

            Collaborative playlists are only retrievable *for the current user* and requires the `playlist-read-collaborative` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) to have been authorized by the user.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "'The maximum number of playlists to return. Default: 20. Minimum:
            1. Maximum: 50.'"
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "'The index of the first playlist to return. Default: 0 (the first
            object). Maximum offset: 100.000. Use with `limit` to get the next
            set of playlists.'"
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SimplifiedPlaylistObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of simplified [playlist
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Please note that the access token has to be tied to a user.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-read-private
            - playlist-read-collaborative
      summary: Get a List of Current User's Playlists
      tags:
        - category-playlists
  /me/shows:
    delete:
      description: Delete one or more shows from current Spotify user's library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-shows-user
      operationId: endpoint-remove-shows-user
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            issued on behalf of the user. The `user-library-modify` scope must
            have been authorized by the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: A comma-separated list of Spotify IDs for the shows to be deleted
            from the user's library.
          in: query
          name: ids
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a
            country code is specified, only shows that are available in that
            market will be removed.  

            If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the content is considered unavailable for the client.*   

            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          description: >-
            On success, the HTTP status code in the response header is `200`
            OK.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Remove User's Saved Shows
      tags:
        - category-library
    get:
      description: Get a list of shows saved in the current Spotify user's library.
        Optional parameters can be used to limit the number of shows returned.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-shows
      operationId: endpoint-get-users-saved-shows
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            isued on behalf of the user. The `user-libary-read` scope must have
            been authorised by the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The maximum number of shows to return. Default: 20. Minimum: 1.
            Maximum: 50"
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first show to return. Default: 0 (the first
            object). Use with limit to get the next set of shows."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SavedShowObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of [saved show
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format.

            If the current user has no shows saved, the response will be an empty array. If a show is unavailable in the given `market` it is filtered out. The `total` field in the paging object represents the number of all items, filtered or not, and thus might be larger than the actual total number of observable items.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Get User's Saved Shows
      tags:
        - category-library
    put:
      description: Save one or more shows to current Spotify user's library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-shows-user
      operationId: endpoint-save-shows-user
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            issued on behalf of the user. The `user-library-modify` scope must
            have been authorized by the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          description: On success, the HTTP status code in the response header is `200`
            OK. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#error-details).
            A `403 Forbidden` while trying to add a show when you do not have
            the user's authorisation or when the user already has have over
            10,000 items saved in library.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Save Shows for Current User
      tags:
        - category-library
  /me/shows/contains:
    get:
      description: Check if one or more shows is already saved in the current Spotify
        user's library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-shows
      operationId: endpoint-check-users-saved-shows
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            isued on behalf of the user. The `user-libary-read` scope must have
            been authorised by the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the Spotify IDs for the shows. Maximum:
            50 ids."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: boolean
                type: array
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains a JSON array of `true`or `false`
            values, in the same order in which the `ids` were specified. On
            error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#error-details).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Check User's Saved Shows
      tags:
        - category-library
  "/me/top/{type}":
    get:
      description: Get the current user's top artists or tracks based on calculated
        affinity.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks
      operationId: endpoint-get-users-top-artists-and-tracks
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            current user.  

            Getting details of a user's top artists and tracks requires authorization of the `user-top-read` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The type of entity to return. Valid values: `artists` or `tracks`"
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: "Over what time frame the affinities are computed. Valid values:
            `long_term` (calculated from several years of data and including all
            new data as it becomes available), `medium_term` (approximately last
            6 months), `short_term` (approximately last 4 weeks). Default:
            `medium_term`"
          in: query
          name: time_range
          required: false
          schema:
            type: string
        - description: "The number of entities to return. Default: 20. Minimum: 1.
            Maximum: 50. For example: `limit=2`"
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first entity to return. Default: 0 (i.e., the
            first track). Use with limit to get the next set of entities."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/ArtistObject"
                        - $ref: "#/components/schemas/TrackObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is `200 OK`
            and the response body contains a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
            of
            [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)
            or
            [Tracks](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject).
            On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-top-read
      summary: Get a User's Top Artists and Tracks
      tags:
        - category-personalization
  /me/tracks:
    delete:
      description: Remove one or more tracks from the current user's 'Your Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-user
      operationId: endpoint-remove-tracks-user
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Modification of the current user's "Your Music" collection requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if the IDs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). For example:
            `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50
            IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: >-
                    A JSON array of the [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
                    For example: `["4iV5W9uYEdYUVa79Axb7Rh",
                    "1301WleyT98MSxVHPZCA6M"]`  

                    A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "200":
          description: On success, the HTTP status code in the response header is `200`
            Success. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to remove an album when you do not have the user's
            authorization returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Remove User's Saved Tracks
      tags:
        - category-library
    get:
      description: Get a list of the songs saved in the current Spotify user's 'Your
        Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-tracks
      operationId: endpoint-get-users-saved-tracks
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The `user-library-read`
            [scope](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes) must have been authorized by
            the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: "The maximum number of objects to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first object to return. Default: 0 (i.e., the
            first object). Use with `limit` to get the next set of objects."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SavedTrackObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of [saved track
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Get User's Saved Tracks
      tags:
        - category-library
    put:
      description: Save one or more tracks to the current user's 'Your Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-tracks-user
      operationId: endpoint-save-tracks-user
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Modification of the current user's "Your Music" collection requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if the IDs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids). For example:
            `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50
            IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: >-
                    A JSON array of the [Spotify
                    IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
                    For example: `["4iV5W9uYEdYUVa79Axb7Rh",
                    "1301WleyT98MSxVHPZCA6M"]`  

                    A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "200":
          description: On success, the HTTP status code in the response header is `200`
            OK. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to add a track when you do not have the user's authorization,
            or when you have over 10.000 tracks in Your Music, returns error
            `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-modify
      summary: Save Tracks for User
      tags:
        - category-library
  /me/tracks/contains:
    get:
      description: Check if one or more tracks is already saved in the current Spotify
        user's 'Your Music' library.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-tracks
      operationId: endpoint-check-users-saved-tracks
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The `user-library-read`
            [scope](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes) must have been authorized by
            the user."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the tracks. Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: boolean
                type: array
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a JSON array of `true` or `false`
            values, in the same order in which the `ids` were specified.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-library-read
      summary: Check User's Saved Tracks
      tags:
        - category-library
  "/playlists/{playlist_id}":
    get:
      description: Get a playlist owned by a Spotify user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist
      operationId: endpoint-get-playlist
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. Both Public and Private playlists
            belonging to any user are retrievable on provision of a valid access
            token."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track

            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: "Filters for the query: a comma-separated list of the fields to
            return. If omitted, all fields are returned. For example, to get
            just the playlist''s description and URI: `fields=description,uri`.
            A dot separator can be used to specify non-reoccurring fields, while
            parentheses can be used to specify reoccurring fields within
            objects. For example, to get just the added date and user ID of the
            adder: `fields=tracks.items(added_at,added_by.id)`. Use multiple
            parentheses to drill down into nested objects, for example:
            `fields=tracks.items(track(name,href,album(name,href)))`. Fields can
            be excluded by prefixing them with an exclamation mark, for example:
            `fields=tracks.items(track(name,href,album(!name,href)))`"
          in: query
          name: fields
          required: false
          schema:
            type: string
        - description: "A comma-separated list of item types that your client supports
            besides the default `track` type. Valid types are: `track` and
            `episode`. **Note** : This parameter was introduced to allow
            existing clients to maintain their current behaviour and might be
            deprecated in the future. In addition to providing this parameter,
            make sure that your client properly handles cases of new types in
            the future by checking against the `type` field of each object."
          in: query
          name: additional_types
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistObject"
          description: On success, the response body contains a [playlist
            object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)
            in JSON format and the HTTP status code in the response header is
            `200` OK. If an episode is unavailable in the given `market`, its
            information will not be included in the response. On error, the
            header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Requesting playlists that you do not have the user's authorization
            to access returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Playlist
      tags:
        - category-playlists
    put:
      description: |-
        Change a playlist's name and public/private state. (The user must, of
        course, own the playlist.)
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-change-playlist-details
      operationId: endpoint-change-playlist-details
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            user.  

            Changing a public playlist for a user requires authorization of the `playlist-modify-public` scope; changing a private playlist requires the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                collaborative:
                  description: "If `true` , the playlist will become collaborative and other users
                    will be able to modify the playlist in their Spotify client.
                    *Note: You can only set `collaborative` to `true` on
                    non-public playlists.*"
                  type: boolean
                description:
                  description: Value for playlist description as displayed in Spotify Clients and
                    in the Web API.
                  type: string
                name:
                  description: The new name for the playlist, for example `"My New Playlist
                    Title"`
                  type: string
                public:
                  description: If `true` the playlist will be public, if `false` it will be
                    private.
                  type: boolean
              type: object
        required: false
      responses:
        "200":
          description: >-
            On success the HTTP status code in the response header is `200` OK.


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Change a Playlist's Details
      tags:
        - category-playlists
  "/playlists/{playlist_id}/followers":
    delete:
      description: Remove the current user as a follower of a playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-playlist
      operationId: endpoint-unfollow-playlist
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            user.  

            Unfollowing a publicly followed playlist for a user requires authorization of the `playlist-modify-public` scope; unfollowing a privately followed playlist requires the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).  

            *Note that the scopes you provide relate only to whether the current user is following the playlist publicly or privately (i.e. showing others what they are following), not whether the playlist itself is public or private.*
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            of the playlist that is to be no longer followed.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body is empty.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Unfollow Playlist
      tags:
        - category-follow
    put:
      description: Add the current user as a follower of a playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-playlist
      operationId: endpoint-follow-playlist
      parameters:
        - description: A valid user access token or your client credentials. Requires the
            `user-follow-modify` scope.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            of the playlist. Any playlist can be followed, regardless of its
            [public/private
            status](https://developer.spotify.com/documentation/general/guides/working-with-playlists/#public-private-and-collaborative-status),
            as long as you know its playlist ID.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                public:
                  description: Defaults to `true`. If `true` the playlist will be included in
                    user's public playlists, if `false` it will remain private.
                    To be able to follow playlists privately, the user must have
                    granted the `playlist-modify-private`
                    [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
                  type: boolean
              type: object
        required: false
      responses:
        "200":
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body is empty.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - user-follow-modify
      summary: Follow a Playlist
      tags:
        - category-follow
  "/playlists/{playlist_id}/followers/contains":
    get:
      description: Check to see if one or more Spotify users are following a specified
        playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-if-user-follows-playlist
      operationId: endpoint-check-if-user-follows-playlist
      parameters:
        - description: A valid user access token or your client credentials. Requires the
            `playlist-read-private` scope if a private playlist is requested.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            of the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: "A comma-separated list of [Spotify User
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) ; the ids of the users that you want to check to see if
            they follow the playlist. Maximum: 5 ids."
          in: query
          name: ids
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: boolean
                type: array
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains a JSON array of `true` or `false`
            values, in the same order in which the `ids` were specified.

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-read-private
      summary: Check if Users Follow a Playlist
      tags:
        - category-follow
  "/playlists/{playlist_id}/images":
    get:
      description: Get the current image associated with a specific playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist-cover
      operationId: endpoint-get-playlist-cover
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            user.  

            This access token must be issued on behalf of the user.   

            Current playlist image for both Public and Private playlists of any user are retrievable on provision of a valid access token.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ImageObject"
                type: array
          description: >-
            On success, the response body contains a list of [image
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject)
            in JSON format and the HTTP status code in the response header is
            `200` OK  

            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Playlist Cover Image
      tags:
        - category-playlists
    put:
      description: Replace the image used to represent a specific playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-upload-custom-playlist-cover
      operationId: endpoint-upload-custom-playlist-cover
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            user.  

            This access token must be tied to the user who owns the playlist, and must have the scope `ugc-image-upload` granted. In addition, the token must also contain `playlist-modify-public` and/or `playlist-modify-private`, depending the public status of the playlist you want to update . See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The content type of the request body: `image/jpeg`"
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      responses:
        "202":
          description: >-
            If you get status code `429`, it means that you have sent too many
            requests.

            If this happens, have a look in the `Retry-After` header, where you will see a number displayed.

            This is the amount of seconds that you need to wait, before you can retry sending your requests.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - ugc-image-upload
            - playlist-modify-public
            - playlist-modify-private
      summary: Upload a Custom Playlist Cover Image
      tags:
        - category-playlists
  "/playlists/{playlist_id}/tracks":
    delete:
      description: Remove one or more items from a user's playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-playlist
      operationId: endpoint-remove-tracks-playlist
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            issued on behalf of the user. Removing items from a user's public
            playlist requires authorization of the `playlist-modify-public`
            scope; removing items from a private playlist requires the
            `playlist-modify-private` scope. See [Using
            Scopes](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes)."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                snapshot_id:
                  description: The playlist's snapshot ID against which you want to make the
                    changes. The API will validate that the specified items
                    exist and in the specified positions and make the changes,
                    even if more recent changes have been made to the playlist.
                  type: string
                tracks:
                  description: 'An array of objects containing [Spotify
                    URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids)
                    of the tracks or episodes to remove. For example: `{
                    "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh"
                    },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A
                    maximum of 100 objects can be sent at once.'
                  items:
                    type: string
                  type: array
              required:
                - tracks
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotIdObject"
          description: >-
            On success, the response body contains a `snapshot_id` in JSON
            format

            and the HTTP status code in the response header is `200` OK. The `snapshot_id`

            can be used to identify your playlist version in future requests.


            On error, the header status code is an [error code](https://developer.spotify.com/spotify-documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/spotify-documentation/web-api/#response-schema).

            Trying to remove an item when you do not have the user's authorization returns error `403` Forbidden.

            Attempting to use several different ways to remove items returns `400` Bad Request.

            Other client errors returning `400` Bad Request include specifying invalid positions.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Remove Items from a Playlist
      tags:
        - category-playlists
    get:
      description: Get full details of the items of a playlist owned by a Spotify user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlists-tracks
      operationId: endpoint-get-playlists-tracks
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. Both Public and Private playlists
            belonging to any user are retrievable on provision of a valid access
            token."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track

            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the episode is considered unavailable for the client.*
          in: query
          name: market
          required: true
          schema:
            type: string
        - description: >-
            Filters for the query: a comma-separated list of the fields to
            return. If omitted, all fields are returned. For example, to get
            just the total number of items and the request limit:  

            `fields=total,limit`  

            A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:  

            `fields=items(added_at,added_by.id)`  

            Use multiple parentheses to drill down into nested objects, for example:  

            `fields=items(track(name,href,album(name,href)))`  

            Fields can be excluded by prefixing them with an exclamation mark, for example:  

            `fields=items.track.album(!external_urls,images)`
          in: query
          name: fields
          required: false
          schema:
            type: string
        - description: "The maximum number of items to return. Default: 100. Minimum: 1.
            Maximum: 100."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first item to return. Default: 0 (the first
            object)."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: "A comma-separated list of item types that your client supports
            besides the default `track` type. Valid types are: `track` and
            `episode`. **Note** : This parameter was introduced to allow
            existing clients to maintain their current behaviour and might be
            deprecated in the future. In addition to providing this parameter,
            make sure that your client properly handles cases of new types in
            the future by checking against the `type` field of each object."
          in: query
          name: additional_types
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/PlaylistTrackObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the response body contains an array of [track
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject)
            and [episode
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject)
            (depends on the `additional_types` parameter), wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
            in JSON format and the HTTP status code in the response header is
            `200` OK. If an episode is unavailable in the given `market`, its
            information will not be included in the response. On error, the
            header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Requesting playlists that you do not have the user's authorization
            to access returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Playlist's Items
      tags:
        - category-playlists
    post:
      description: Add one or more items to a user's playlist.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist
      operationId: endpoint-add-tracks-to-playlist
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            user.  

            Adding items to the current user's public playlists requires authorization of the `playlist-modify-public` scope; adding items to the current user's private playlist (including collaborative playlists) requires the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if URIs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: "The position to insert the items, a zero-based index. For example,
            to insert the items in the first position: `position=0`; to insert
            the items in the third position: `position=2` . If omitted, the
            items will be appended to the playlist. Items are added in the order
            they are listed in the query string or request body."
          in: query
          name: position
          required: false
          schema:
            format: int32
            type: integer
        - description: >-
            A comma-separated list of [Spotify
            URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            to add, can be track or episode URIs. For example:  

            `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`  

            A maximum of 100 items can be added in one request. *Note: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below.*
          in: query
          name: uris
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                position:
                  description: 'The position to insert the items, a zero-based index. For example,
                    to insert the items in the first position: `position=0` ; to
                    insert the items in the third position: `position=2`. If
                    omitted, the items will be appended to the playlist. Items
                    are added in the order they appear in the uris array. For
                    example: `{"uris":
                    ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"],
                    "position": 3}`'
                  format: int32
                  type: integer
                uris:
                  description: >-
                    A JSON array of the [Spotify
                    URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
                    to add. For example: `{"uris":
                    ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M",
                    "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`  

                    A maximum of 100 items can be added in one request. *Note: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored.*
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotIdObject"
          description: On success, the HTTP status code in the response header is `201`
            Created. The response body contains a `snapshot_id` in JSON format.
            The `snapshot_id` can be used to identify your playlist version in
            future requests. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            Trying to add an item when you do not have the user's authorization,
            or when there are more than 10.000 items in the playlist, returns
            error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Add Items to a Playlist
      tags:
        - category-playlists
    put:
      description: >-
        Either reorder or replace items in a playlist depending on the
        request's parameters.

        To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.

        To replace items, include `uris` as either a query parameter or in the request's body.

        Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.



        **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.

        These operations can't be applied together in a single request.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks
      operationId: endpoint-reorder-or-replace-playlists-tracks
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details. The access token must have been issued on behalf of the
            user.   

            Reordering or replacing items in the current user's public playlists requires authorization of the `playlist-modify-public` scope; reordering or replacing items in the current user's private playlist (including collaborative playlists) requires the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "*Required if URIs are passed in the request body, otherwise
            ignored.* The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          in: path
          name: playlist_id
          required: true
          schema:
            type: string
        - description: >-
            A comma-separated list of [Spotify
            URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            to set, can be track or episode URIs. For example:
            `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`  

            A maximum of 100 items can be set in one request.
          in: query
          name: uris
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                insert_before:
                  description: >-
                    The position where the items should be inserted.  

                    To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.  

                    Examples:  

                    To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.  

                    To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
                  format: int32
                  type: integer
                range_length:
                  description: >-
                    The amount of items to be reordered. Defaults to 1 if not set.  

                    The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.  

                    Example:  

                    To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
                  format: int32
                  type: integer
                range_start:
                  description: The position of the first item to be reordered.
                  format: int32
                  type: integer
                snapshot_id:
                  description: The playlist's snapshot ID against which you want to make the
                    changes.
                  type: string
                uris:
                  description: >-
                    A comma-separated list of [Spotify
                    URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
                    to set, can be track or episode URIs. For example:
                    `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`  

                    A maximum of 100 items can be set in one request.
                  items:
                    type: string
                  type: array
              type: object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotIdObject"
          description: >-
            On a successful **reorder** operation, the response body contains a
            `snapshot_id` in JSON format

            and the HTTP status code in the response header is `200` OK. The `snapshot_id`

            can be used to identify your playlist version in future requests.


            On a successful **replace** operation, the HTTP status code in the response header is `201`

            Created.


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),

            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),

            and the existing playlist is unmodified.

            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.
        "201":
          description: >-
            On a successful **reorder** operation, the response body contains a
            `snapshot_id` in JSON format

            and the HTTP status code in the response header is `200` OK. The `snapshot_id`

            can be used to identify your playlist version in future requests.


            On a successful **replace** operation, the HTTP status code in the response header is `201`

            Created.


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),

            the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),

            and the existing playlist is unmodified.

            Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Reorder or Replace a Playlist's Items
      tags:
        - category-playlists
  /recommendations:
    get:
      description: Recommendations are generated based on the available information
        for a given seed entity and matched against similar artists and tracks.
        If there is sufficient information about the provided seeds, a list of
        tracks will be returned together with pool size details.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendations
      operationId: endpoint-get-recommendations
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The target size of the list of recommended tracks. For seeds with
            unusually small pools or when highly restrictive filtering is
            applied, it may be impossible to generate the requested number of
            recommended tracks. Debugging information for such cases is
            available in the response. Default: 20. Minimum: 1. Maximum: 100."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide).
            Because `min_*`, `max_*` and `target_*` are applied to pools before
            relinking, the generated results may not precisely match the filters
            applied. Original, non-relinked tracks are available via the
            `linked_from` attribute of the [relinked track
            response](https://developer.spotify.com/documentation/general/guides/track-relinking-guide).
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: A comma separated list of [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for seed artists. Up to 5 seed values may be provided in any
            combination of `seed_artists`, `seed_tracks` and `seed_genres`.
          in: query
          name: seed_artists
          required: true
          schema:
            type: string
        - description: A comma separated list of any genres in the set of [available genre
            seeds](#available-genre-seeds). Up to 5 seed values may be provided
            in any combination of `seed_artists`, `seed_tracks` and
            `seed_genres`.
          in: query
          name: seed_genres
          required: true
          schema:
            type: string
        - description: A comma separated list of [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for a seed track. Up to 5 seed values may be provided in any
            combination of `seed_artists`, `seed_tracks` and `seed_genres`.
          in: query
          name: seed_tracks
          required: true
          schema:
            type: string
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_acousticness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_acousticness
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_acousticness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_danceability
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_danceability
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_danceability
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_duration_ms
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_duration_ms
          required: false
          schema:
            format: int32
            type: integer
        - description: Target duration of the track (ms)
          in: query
          name: target_duration_ms
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_energy
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_energy
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_energy
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_instrumentalness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_instrumentalness
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_instrumentalness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_key
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_key
          required: false
          schema:
            format: int32
            type: integer
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_key
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_liveness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_liveness
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_liveness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_loudness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_loudness
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_loudness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_mode
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_mode
          required: false
          schema:
            format: int32
            type: integer
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_mode
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_popularity
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_popularity
          required: false
          schema:
            format: int32
            type: integer
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_popularity
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_speechiness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_speechiness
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_speechiness
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_tempo
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_tempo
          required: false
          schema:
            type: number
        - description: Target tempo (BPM)
          in: query
          name: target_tempo
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_time_signature
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_time_signature
          required: false
          schema:
            format: int32
            type: integer
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_time_signature
          required: false
          schema:
            format: int32
            type: integer
        - description: For each tunable track attribute, a hard floor on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `min_tempo=140` would restrict results to only those tracks with a
            tempo of greater than 140 beats per minute.
          in: query
          name: min_valence
          required: false
          schema:
            type: number
        - description: For each tunable track attribute, a hard ceiling on the selected
            track attribute's value can be provided. See tunable track
            attributes below for the list of available options. For example,
            `max_instrumentalness=0.35` would filter out most tracks that are
            likely to be instrumental.
          in: query
          name: max_valence
          required: false
          schema:
            type: number
        - description: For each of the tunable track attributes (below) a target value may
            be provided. Tracks with the attribute values nearest to the target
            values will be preferred. For example, you might request
            `target_energy=0.6` and `target_danceability=0.8`. All target values
            will be weighed equally in ranking results.
          in: query
          name: target_valence
          required: false
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecommendationsObject"
          description: On success, the HTTP status code in the response header is `200 OK`
            and the response body contains a recommendations response object in
            JSON format.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Recommendations
      tags:
        - category-browse
  /recommendations/available-genre-seeds:
    get:
      description: Retrieve a list of available genres seed parameter values for
        [recommendations](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendations).
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendation-genres
      operationId: endpoint-get-recommendation-genres
      parameters:
        - description: A valid user access token or your client credentials.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenreSeedsObject"
          description: On success, the HTTP status code in the response header is `200 OK`
            and the response body contains a recommendations response object in
            JSON format.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Recommendation Genres
      tags:
        - category-browse
  /search:
    get:
      description: >-
        Get Spotify Catalog information about albums, artists, playlists,
        tracks, shows or episodes

        that match a keyword string.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-search
      operationId: endpoint-search
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: >-
            Search [query](#writing-a-query---guidelines) keywords and optional
            field filters and operators.   

            For example:   

            `q=roadhouse%20blues`.
          in: query
          name: q
          required: true
          schema:
            type: string
        - description: >-
            A comma-separated list of item types to search across.   

            Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.   

            Search results include hits from all the specified item types.   

            For example: `q=name:abacab&type=album,track` returns both albums ***and*** tracks with "abacab" included in their name.
          in: query
          name: type
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the
            string `from_token`.   

            If a country code is specified, only content that is playable in that market is returned.   

            **Note** :   

            - Playlist results are not affected by the market parameter.   

            - If market is set to `from_token`, and a valid access token is specified in the request header, only content playable in the country associated with the user account, is returned.   

            - Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/). A user must grant access to the `user-read-private` scope prior to when the access token is issued.
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: >-
            Maximum number of results to return.   

            Default: 20   

            Minimum: 1   

            Maximum: 50   

            **Note** : The limit is applied within each type, not on the total response.   

            For example, if the limit value is 3 and the type is `artist,album`, the response contains 3 artists and 3 albums.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: |-
            The index of the first result to return.   
            Default: 0 (the first result).   
            Maximum offset (including limit): 1,000.   
            Use with limit to get the next page of search results.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: >-
            Possible values: *audio*   

            If *include_external=audio* is specified the response will include any relevant audio content that is hosted externally.   

            By default external content is filtered out from responses.
          in: query
          name: include_external
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponseObject"
          description: >-
            **On success**:


            - In the response ***header*** the HTTP status code is `200` OK.

            - For each type provided in the `type` parameter, the response ***body*** contains an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) / [simplified album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) / [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) / [simplified show objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject) / [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON.


            **On error**:


            - The ***header*** status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes).

            - The response ***body*** contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Search for an Item
      tags:
        - category-search
  /shows:
    get:
      description: Get Spotify catalog information for several shows based on their
        Spotify IDs.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-shows
      operationId: endpoint-get-multiple-shows
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the shows. Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a
            country code is specified, only shows and episodes that are
            available in that market will be returned.  

            If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the content is considered unavailable for the client.*   

            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowsObject"
          description: >-
            On success, the HTTP status code in the response header is `200`

            OK and the response body contains an object whose key is `shows` and whose

            value is an array of [simple show object](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject)

            in JSON format.


            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. If a show is unavailable in the given `market`, a `null` value is returned. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Multiple Shows
      tags:
        - category-shows
  "/shows/{id}":
    get:
      description: |-
        Get Spotify catalog information for a single show identified by its
        unique Spotify ID.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-show
      operationId: endpoint-get-a-show
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the show.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a
            country code is specified, only shows and episodes that are
            available in that market will be returned.  

            If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the content is considered unavailable for the client.*   

            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowObject"
          description: >-
            On success, the HTTP status code in the response header is `200`

            OK and the response body contains a [show object](https://developer.spotify.com/documentation/web-api/reference/#object-showobject)

            in JSON format.  


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)

            and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  


            If a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Show
      tags:
        - category-shows
  "/shows/{id}/episodes":
    get:
      description: Get Spotify catalog information about an show's episodes. Optional
        parameters can be used to limit the number of episodes returned.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-shows-episodes
      operationId: endpoint-get-a-shows-episodes
      parameters:
        - description: "valid access token from the Spotify Accounts service: see the [Web
            API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the show.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a
            country code is specified, only shows and episodes that are
            available in that market will be returned.  

            If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  

            *Note: If neither market or user country are provided, the content is considered unavailable for the client.*   

            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
          in: query
          name: market
          required: false
          schema:
            type: string
        - description: "The maximum number of episodes to return. Default: 20. Minimum: 1.
            Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first episode to return. Default: 0 (the first
            object). Use with limit to get the next set of episodes."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SimplifiedEpisodeObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: >-
            On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of [simplified episode
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format.  


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).  


            If a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND. Unavailable episodes are filtered out.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Show's Episodes
      tags:
        - category-shows
  /tracks:
    get:
      description: Get Spotify catalog information for multiple tracks based on their
        Spotify IDs.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-tracks
      operationId: endpoint-get-several-tracks
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "A comma-separated list of the [Spotify
            IDs](https://developer.spotify.com/documentation/web-api/#spotify-u\
            ris-and-ids) for the tracks. Maximum: 50 IDs."
          in: query
          name: ids
          required: true
          schema:
            type: string
        - description: An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TracksObject"
          description: >-
            On success, the HTTP status code in the response header is `200`

            OK and the response body contains an object whose key is `tracks` and whose

            value is an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)

            in JSON format.


            Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get Several Tracks
      tags:
        - category-tracks
  "/tracks/{id}":
    get:
      description: |-
        Get Spotify catalog information for a single track identified by its
        unique Spotify ID.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-track
      operationId: endpoint-get-track
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            An [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string
            `from_token`. Provide this parameter if you want to apply [Track

            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          in: query
          name: market
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackObject"
          description: >-
            On success, the HTTP status code in the response header is `200`

            OK and the response body contains a [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)

            in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)

            and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a Track
      tags:
        - category-tracks
  "/users/{user_id}":
    get:
      description: Get public profile information about a Spotify user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-profile
      operationId: endpoint-get-users-profile
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The user's [Spotify user
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicUserObject"
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains a [user
            object](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject)
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
            If a user with that user_id doesn't exist, the status code is `404`
            NOT FOUND.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth: []
      summary: Get a User's Profile
      tags:
        - category-users-profile
  "/users/{user_id}/playlists":
    get:
      description: Get a list of the playlists owned or followed by a Spotify user.
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-list-users-playlists
      operationId: endpoint-get-list-users-playlists
      parameters:
        - description: >-
            A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)
            for details.  

            Private playlists are only retrievable *for the current user* and requires the `playlist-read-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) to have been authorized by the user. Note that this scope alone will not return collaborative playlists, even though they are always private.  

            Collaborative playlists are only retrievable *for the current user* and requires the `playlist-read-collaborative` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) to have been authorized by the user.
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: The user's [Spotify user
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: "The maximum number of playlists to return. Default: 20. Minimum:
            1. Maximum: 50."
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
        - description: "The index of the first playlist to return. Default: 0 (the first
            object). Maximum offset: 100.000. Use with `limit` to get the next
            set of playlists."
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                externalDocs:
                  description: Find more info on the official Spotify Web API Reference
                  url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
                properties:
                  href:
                    description: A link to the Web API endpoint returning the full result of the
                      request
                    type: string
                  items:
                    description: The requested data.
                    items:
                      $ref: "#/components/schemas/SimplifiedPlaylistObject"
                    type: array
                  limit:
                    description: The maximum number of items in the response (as set in the query or
                      by default).
                    format: int32
                    type: integer
                  next:
                    description: URL to the next page of items. ( `null` if none)
                    type: string
                  offset:
                    description: The offset of the items returned (as set in the query or by
                      default)
                    format: int32
                    type: integer
                  previous:
                    description: URL to the previous page of items. ( `null` if none)
                    type: string
                  total:
                    description: The total number of items available to return.
                    format: int32
                    type: integer
                type: object
          description: On success, the HTTP status code in the response header is `200` OK
            and the response body contains an array of simplified [playlist
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)
            (wrapped in a [paging
            object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))
            in JSON format. On error, the header status code is an [error
            code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            and the response body contains an [error
            object](https://developer.spotify.com/documentation/web-api/#response-schema).
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-read-private
            - playlist-read-collaborative
      summary: Get a List of a User's Playlists
      tags:
        - category-playlists
    post:
      description: >-
        Create a playlist for a Spotify user. (The playlist will be empty
        until

        you [add tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist).)
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-create-playlist
      operationId: endpoint-create-playlist
      parameters:
        - description: "A valid access token from the Spotify Accounts service: see the
            [Web API Authorization
            Guide](https://developer.spotify.com/documentation/general/guides/a\
            uthorization-guide/) for details. The access token must have been
            issued on behalf of the user. Creating a public playlist for a user
            requires authorization of the `playlist-modify-public` scope;
            creating a private playlist requires the `playlist-modify-private`
            scope. See [Using
            Scopes](https://developer.spotify.com/documentation/general/guides/\
            authorization-guide/#list-of-scopes)."
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: "The content type of the request body: `application/json`"
          in: header
          name: Content-Type
          required: false
          schema:
            type: string
        - description: The user's [Spotify user
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).
          in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                collaborative:
                  description: Defaults to `false` . If `true` the playlist will be collaborative.
                    Note that to create a collaborative playlist you must also
                    set `public` to `false` . To create collaborative playlists
                    you must have granted `playlist-modify-private` and
                    `playlist-modify-public`
                    [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
                    .
                  type: boolean
                description:
                  description: value for playlist description as displayed in Spotify Clients and
                    in the Web API.
                  type: string
                name:
                  description: The name for the new playlist, for example `"Your Coolest
                    Playlist"` . This name does not need to be unique; a user
                    may have several playlists with the same name.
                  type: string
                public:
                  description: Defaults to `true` . If `true` the playlist will be public, if
                    `false` it will be private. To be able to create private
                    playlists, the user must have granted the
                    `playlist-modify-private`
                    [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
                  type: boolean
              required:
                - name
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistObject"
          description: >-
            On success, the response body contains the created [playlist
            object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)

            in JSON format and the HTTP status code in the response header is `200` OK or

            `201` Created. There is also a `Location` response header giving the Web API

            endpoint for the new playlist.


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaylistObject"
          description: >-
            On success, the response body contains the created [playlist
            object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)

            in JSON format and the HTTP status code in the response header is `200` OK or

            `201` Created. There is also a `Location` response header giving the Web API

            endpoint for the new playlist.


            On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.
        default:
          $ref: "#/components/responses/ErrorResponse"
      security:
        - spotify_auth:
            - playlist-modify-public
            - playlist-modify-private
      summary: Create a Playlist
      tags:
        - category-playlists
components:
  responses:
    ErrorResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseObject"
      description: Unexpected error
  schemas:
    AlbumObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-albumobject
      properties:
        album_type:
          description: "The type of the album: `album`, `single`, or `compilation`."
          type: string
        artists:
          description: The artists of the album. Each artist object includes a link in
            `href` to more detailed information about the artist.
          items:
            $ref: "#/components/schemas/ArtistObject"
          type: array
        available_markets:
          description: "The markets in which the album is available: [ISO 3166-1 alpha-2
            country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
            Note that an album is considered available in a market when at least
            1 of its tracks is available in that market."
          items:
            type: string
          type: array
        copyrights:
          description: The copyright statements of the album.
          items:
            $ref: "#/components/schemas/CopyrightObject"
          type: array
        external_ids:
          $ref: "#/components/schemas/ExternalIdObject"
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        genres:
          description: 'A list of the genres used to classify the album. For example:
            "Prog Rock" , "Post-Grunge". (If not yet classified, the array is
            empty.)'
          items:
            type: string
          type: array
        href:
          description: A link to the Web API endpoint providing full details of the album.
          type: string
        id:
          description: The Spotify ID for the album.
          type: string
        images:
          description: The cover art for the album in various sizes, widest first.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        label:
          description: The label for the album.
          type: string
        name:
          description: The name of the album. In case of an album takedown, the value may
            be an empty string.
          type: string
        popularity:
          description: The popularity of the album. The value will be between 0 and 100,
            with 100 being the most popular. The popularity is calculated from
            the popularity of the album's individual tracks.
          format: int32
          type: integer
        release_date:
          description: The date the album was first released, for example "1981-12-15".
            Depending on the precision, it might be shown as "1981" or
            "1981-12".
          type: string
        release_date_precision:
          description: 'The precision with which release_date value is known: "year" ,
            "month" , or "day".'
          type: string
        restrictions:
          $ref: "#/components/schemas/AlbumRestrictionObject"
        tracks:
          description: The tracks of the album.
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedTrackObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        type:
          description: 'The object type: "album"'
          type: string
        uri:
          description: The Spotify URI for the album.
          type: string
      type: object
    AlbumRestrictionObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject
      properties:
        reason:
          description: >-
            The reason for the restriction. Supported values:  


            - `market` - The content item is not available in the given market.  

            - `product` - The content item is not available for the user's subscription type.  

            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
              Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.
          type: string
      type: object
    AlbumsObject:
      properties:
        albums:
          description: ""
          items:
            $ref: "#/components/schemas/AlbumObject"
          type: array
      type: object
    ArtistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-artistobject
      properties:
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        followers:
          $ref: "#/components/schemas/FollowersObject"
        genres:
          description: 'A list of the genres the artist is associated with. For example:
            `"Prog Rock"` , `"Post-Grunge"`. (If not yet classified, the array
            is empty.)'
          items:
            type: string
          type: array
        href:
          description: A link to the Web API endpoint providing full details of the artist.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the artist.
          type: string
        images:
          description: Images of the artist in various sizes, widest first.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        name:
          description: The name of the artist.
          type: string
        popularity:
          description: The popularity of the artist. The value will be between 0 and 100,
            with 100 being the most popular. The artist's popularity is
            calculated from the popularity of all the artist's tracks.
          format: int32
          type: integer
        type:
          description: 'The object type: `"artist"`'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the artist.
          type: string
      type: object
    ArtistsObject:
      properties:
        artists:
          description: ""
          items:
            $ref: "#/components/schemas/ArtistObject"
          type: array
      type: object
    AudioAnalysisObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#audio-analysis-object
      properties:
        bars:
          description: The time intervals of the bars throughout the track. A bar (or
            measure) is a segment of time defined as a given number of beats.
            Bar offsets also indicate downbeats, the first beat of the measure.
          items:
            $ref: "#/components/schemas/TimeIntervalObject"
          type: array
        beats:
          description: The time intervals of beats throughout the track. A beat is the
            basic time unit of a piece of music; for example, each tick of a
            metronome. Beats are typically multiples of tatums.
          items:
            $ref: "#/components/schemas/TimeIntervalObject"
          type: array
        sections:
          description: Sections are defined by large variations in rhythm or timbre, e.g.
            chorus, verse, bridge, guitar solo, etc. Each section contains its
            own descriptions of tempo, key, mode, time_signature, and loudness.
          items:
            $ref: "#/components/schemas/SectionObject"
          type: array
        segments:
          description: Audio segments attempts to subdivide a song into many segments,
            with each segment containing a roughly consistent sound throughout
            its duration.
          items:
            $ref: "#/components/schemas/SegmentObject"
          type: array
        tatums:
          description: A tatum represents the lowest regular pulse train that a listener
            intuitively infers from the timing of perceived musical events
            (segments).
          items:
            $ref: "#/components/schemas/TimeIntervalObject"
          type: array
      type: object
    AudioFeaturesArrayObject:
      properties:
        audio_features:
          description: ""
          items:
            $ref: "#/components/schemas/AudioFeaturesObject"
          type: array
      type: object
    AudioFeaturesObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject
      properties:
        acousticness:
          description: A confidence measure from 0.0 to 1.0 of whether the track is
            acoustic. 1.0 represents high confidence the track is acoustic.
          type: number
        analysis_url:
          description: An HTTP URL to access the full audio analysis of this track. An
            access token is required to access this data.
          type: string
        danceability:
          description: Danceability describes how suitable a track is for dancing based on
            a combination of musical elements including tempo, rhythm stability,
            beat strength, and overall regularity. A value of 0.0 is least
            danceable and 1.0 is most danceable.
          type: number
        duration_ms:
          description: The duration of the track in milliseconds.
          format: int32
          type: integer
        energy:
          description: Energy is a measure from 0.0 to 1.0 and represents a perceptual
            measure of intensity and activity. Typically, energetic tracks feel
            fast, loud, and noisy. For example, death metal has high energy,
            while a Bach prelude scores low on the scale. Perceptual features
            contributing to this attribute include dynamic range, perceived
            loudness, timbre, onset rate, and general entropy.
          type: number
        id:
          description: The Spotify ID for the track.
          type: string
        instrumentalness:
          description: Predicts whether a track contains no vocals. "Ooh" and "aah" sounds
            are treated as instrumental in this context. Rap or spoken word
            tracks are clearly "vocal". The closer the instrumentalness value is
            to 1.0, the greater likelihood the track contains no vocal content.
            Values above 0.5 are intended to represent instrumental tracks, but
            confidence is higher as the value approaches 1.0.
          type: number
        key:
          description: The key the track is in. Integers map to pitches using standard
            [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class) .
            E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
          format: int32
          type: integer
        liveness:
          description: Detects the presence of an audience in the recording. Higher
            liveness values represent an increased probability that the track
            was performed live. A value above 0.8 provides strong likelihood
            that the track is live.
          type: number
        loudness:
          description: The overall loudness of a track in decibels (dB). Loudness values
            are averaged across the entire track and are useful for comparing
            relative loudness of tracks. Loudness is the quality of a sound that
            is the primary psychological correlate of physical strength
            (amplitude). Values typical range between -60 and 0 db.
          type: number
        mode:
          description: Mode indicates the modality (major or minor) of a track, the type
            of scale from which its melodic content is derived. Major is
            represented by 1 and minor is 0.
          format: int32
          type: integer
        speechiness:
          description: Speechiness detects the presence of spoken words in a track. The
            more exclusively speech-like the recording (e.g. talk show, audio
            book, poetry), the closer to 1.0 the attribute value. Values above
            0.66 describe tracks that are probably made entirely of spoken
            words. Values between 0.33 and 0.66 describe tracks that may contain
            both music and speech, either in sections or layered, including such
            cases as rap music. Values below 0.33 most likely represent music
            and other non-speech-like tracks.
          type: number
        tempo:
          description: The overall estimated tempo of a track in beats per minute (BPM).
            In musical terminology, tempo is the speed or pace of a given piece
            and derives directly from the average beat duration.
          type: number
        time_signature:
          description: An estimated overall time signature of a track. The time signature
            (meter) is a notational convention to specify how many beats are in
            each bar (or measure).
          format: int32
          type: integer
        track_href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        type:
          description: 'The object type: "audio_features"'
          type: string
        uri:
          description: The Spotify URI for the track.
          type: string
        valence:
          description: A measure from 0.0 to 1.0 describing the musical positiveness
            conveyed by a track. Tracks with high valence sound more positive
            (e.g. happy, cheerful, euphoric), while tracks with low valence
            sound more negative (e.g. sad, depressed, angry).
          type: number
      type: object
    CategoriesObject:
      properties:
        categories:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/CategoryObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    CategoryObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-categoryobject
      properties:
        href:
          description: A link to the Web API endpoint returning full details of the
            category.
          type: string
        icons:
          description: The category icon, in various sizes.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        id:
          description: The [Spotify category
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            of the category.
          type: string
        name:
          description: The name of the category.
          type: string
      type: object
    ContextObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-contextobject
      properties:
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        type:
          description: The object type, e.g. "artist", "playlist", "album", "show".
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the context.
          type: string
      type: object
    CopyrightObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-copyrightobject
      properties:
        text:
          description: The copyright text for this content.
          type: string
        type:
          description: "The type of copyright: `C` = the copyright, `P` = the sound
            recording (performance) copyright."
          type: string
      type: object
    CurrentlyPlayingContextObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingcontextobject
      properties:
        actions:
          $ref: "#/components/schemas/DisallowsObject"
        context:
          $ref: "#/components/schemas/ContextObject"
        currently_playing_type:
          description: The object type of the currently playing item. Can be one of
            `track`, `episode`, `ad` or `unknown`.
          type: string
        device:
          $ref: "#/components/schemas/DeviceObject"
        is_playing:
          description: If something is currently playing, return `true`.
          type: boolean
        item:
          description: The currently playing track or episode. Can be `null`.
          oneOf:
            - $ref: "#/components/schemas/TrackObject"
            - $ref: "#/components/schemas/EpisodeObject"
        progress_ms:
          description: Progress into the currently playing track or episode. Can be `null`.
          format: int32
          type: integer
        repeat_state:
          description: off, track, context
          type: string
        shuffle_state:
          description: If shuffle is on or off.
          type: string
        timestamp:
          description: Unix Millisecond Timestamp when data was fetched.
          format: int32
          type: integer
      type: object
    CurrentlyPlayingObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingobject
      properties:
        context:
          $ref: "#/components/schemas/ContextObject"
        currently_playing_type:
          description: The object type of the currently playing item. Can be one of
            `track`, `episode`, `ad` or `unknown`.
          type: string
        is_playing:
          description: If something is currently playing, return `true`.
          type: boolean
        item:
          description: The currently playing track or episode. Can be `null`.
          oneOf:
            - $ref: "#/components/schemas/TrackObject"
            - $ref: "#/components/schemas/EpisodeObject"
        progress_ms:
          description: Progress into the currently playing track or episode. Can be `null`.
          format: int32
          type: integer
        timestamp:
          description: Unix Millisecond Timestamp when data was fetched
          format: int32
          type: integer
      type: object
    CursorObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-cursorobject
      properties:
        after:
          description: The cursor to use as key to find the next page of items.
          type: string
      type: object
    CursorPagingObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject
      properties:
        cursors:
          $ref: "#/components/schemas/CursorObject"
        href:
          description: A link to the Web API endpoint returning the full result of the
            request.
          type: string
        items:
          description: The requested data.
          items:
            type: object
          type: array
        limit:
          description: The maximum number of items in the response (as set in the query or
            by default).
          format: int32
          type: integer
        next:
          description: URL to the next page of items. ( `null` if none)
          type: string
        total:
          description: The total number of items available to return.
          format: int32
          type: integer
      type: object
    DeviceObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-deviceobject
      properties:
        id:
          description: The device ID. This may be `null`.
          type: string
        is_active:
          description: If this device is the currently active device.
          type: boolean
        is_private_session:
          description: If this device is currently in a private session.
          type: boolean
        is_restricted:
          description: Whether controlling this device is restricted. At present if this
            is "true" then no Web API commands will be accepted by this device.
          type: boolean
        name:
          description: The name of the device.
          type: string
        type:
          description: Device type, such as "computer", "smartphone" or "speaker".
          type: string
        volume_percent:
          description: The current volume in percent. This may be null.
          format: int32
          type: integer
      type: object
    DevicesObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-devicesobject
      properties:
        devices:
          description: A list of 0..n Device objects
          items:
            $ref: "#/components/schemas/DeviceObject"
          type: array
      type: object
    DisallowsObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-disallowsobject
      properties:
        interrupting_playback:
          description: Interrupting playback. Optional field.
          type: boolean
        pausing:
          description: Pausing. Optional field.
          type: boolean
        resuming:
          description: Resuming. Optional field.
          type: boolean
        seeking:
          description: Seeking playback location. Optional field.
          type: boolean
        skipping_next:
          description: Skipping to the next context. Optional field.
          type: boolean
        skipping_prev:
          description: Skipping to the previous context. Optional field.
          type: boolean
        toggling_repeat_context:
          description: Toggling repeat context flag. Optional field.
          type: boolean
        toggling_repeat_track:
          description: Toggling repeat track flag. Optional field.
          type: boolean
        toggling_shuffle:
          description: Toggling shuffle flag. Optional field.
          type: boolean
        transferring_playback:
          description: Transfering playback between devices. Optional field.
          type: boolean
      type: object
    EpisodeObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject
      properties:
        audio_preview_url:
          description: A URL to a 30 second preview (MP3 format) of the episode. `null` if
            not available.
          type: string
        description:
          description: A description of the episode.
          type: string
        duration_ms:
          description: The episode length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the episode has explicit content (true = yes it
            does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the episode.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the episode.
          type: string
        images:
          description: The cover art for the episode in various sizes, widest first.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        is_externally_hosted:
          description: True if the episode is hosted outside of Spotify's CDN.
          type: boolean
        is_playable:
          description: True if the episode is playable in the given market. Otherwise false.
          type: boolean
        language:
          description: "**Note: This field is deprecated and might be removed in the
            future. Please use the `languages` field instead.** The language
            used in the episode, identified by a [ISO
            639](https://en.wikipedia.org/wiki/ISO_639) code."
          type: string
        languages:
          description: A list of the languages used in the episode, identified by their
            [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        name:
          description: The name of the episode.
          type: string
        release_date:
          description: The date the episode was first released, for example
            `"1981-12-15"`. Depending on the precision, it might be shown as
            `"1981"` or `"1981-12"`.
          type: string
        release_date_precision:
          description: 'The precision with which `release_date` value is known: `"year"`,
            `"month"`, or `"day"`.'
          type: string
        resume_point:
          $ref: "#/components/schemas/ResumePointObject"
        show:
          $ref: "#/components/schemas/SimplifiedShowObject"
        type:
          description: 'The object type: "episode".'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the episode.
          type: string
      type: object
    EpisodesObject:
      properties:
        episodes:
          description: ""
          items:
            $ref: "#/components/schemas/EpisodeObject"
          type: array
      type: object
    ErrorObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-errorobject
      properties:
        message:
          description: A short description of the cause of the error.
          type: string
        status:
          description: The HTTP status code (also returned in the response header; see
            [Response Status
            Codes](https://developer.spotify.com/documentation/web-api/#response-status-codes)
            for more information).
          format: int32
          type: integer
      type: object
    ErrorResponseObject:
      properties:
        error:
          $ref: "#/components/schemas/ErrorObject"
      type: object
    ExplicitContentSettingsObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-explicitcontentsettingsobject
      properties:
        filter_enabled:
          description: When `true`, indicates that explicit content should not be played.
          type: boolean
        filter_locked:
          description: When `true`, indicates that the explicit content setting is locked
            and can't be changed by the user.
          type: boolean
      type: object
    ExternalIdObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-externalidobject
      properties:
        ean:
          description: "[International Article
            Number](http://en.wikipedia.org/wiki/International_Article_Number_%\
            28EAN%29)"
          type: string
        isrc:
          description: "[International Standard Recording
            Code](http://en.wikipedia.org/wiki/International_Standard_Recording\
            _Code)"
          type: string
        upc:
          description: "[Universal Product
            Code](http://en.wikipedia.org/wiki/Universal_Product_Code)"
          type: string
      type: object
    ExternalUrlObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject
      properties:
        spotify:
          description: The [Spotify
            URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the object.
          type: string
      type: object
    FeaturedPlaylistObject:
      properties:
        message:
          description: ""
          type: string
        playlists:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedPlaylistObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    FollowersObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-followersobject
      properties:
        href:
          description: A link to the Web API endpoint providing full details of the
            followers; `null` if not available. Please note that this will
            always be set to null, as the Web API does not support it at the
            moment.
          type: string
        total:
          description: The total number of followers.
          format: int32
          type: integer
      type: object
    FollowingArtistsObject:
      properties:
        artists:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject
          properties:
            cursors:
              $ref: "#/components/schemas/CursorObject"
            href:
              description: A link to the Web API endpoint returning the full result of the
                request.
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/ArtistObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    GenreSeedsObject:
      properties:
        genres:
          description: ""
          items:
            type: string
          type: array
      type: object
    ImageObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-imageobject
      properties:
        height:
          description: "The image height in pixels. If unknown: `null` or not returned."
          format: int32
          type: integer
        url:
          description: The source URL of the image.
          type: string
        width:
          description: "The image width in pixels. If unknown: `null` or not returned."
          format: int32
          type: integer
      type: object
    LinkedTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-linkedtrackobject
      properties:
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          type: string
        type:
          description: 'The object type: "track".'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          type: string
      type: object
    MarketsObject:
      properties:
        markets:
          description: ""
          items:
            type: string
          type: array
      type: object
    NewReleasesObject:
      properties:
        albums:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedAlbumObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    PagingObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
      properties:
        href:
          description: A link to the Web API endpoint returning the full result of the
            request
          type: string
        items:
          description: The requested data.
          items:
            type: object
          type: array
        limit:
          description: The maximum number of items in the response (as set in the query or
            by default).
          format: int32
          type: integer
        next:
          description: URL to the next page of items. ( `null` if none)
          type: string
        offset:
          description: The offset of the items returned (as set in the query or by default)
          format: int32
          type: integer
        previous:
          description: URL to the previous page of items. ( `null` if none)
          type: string
        total:
          description: The total number of items available to return.
          format: int32
          type: integer
      type: object
    PlayHistoryObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playhistoryobject
      properties:
        context:
          $ref: "#/components/schemas/ContextObject"
        played_at:
          description: The date and time the track was played.
          format: date-time
          type: string
        track:
          $ref: "#/components/schemas/SimplifiedTrackObject"
      type: object
    PlayerErrorObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playererrorobject
      properties:
        message:
          description: A short description of the cause of the error.
          type: string
        reason:
          description: >-
            - `NO_PREV_TRACK` - The command requires a previous track, but
            there is none in the context.

            - `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.

            - `NO_SPECIFIC_TRACK` - The requested track does not exist.

            - `ALREADY_PAUSED` - The command requires playback to not be paused.

            - `NOT_PAUSED` - The command requires playback to be paused.

            - `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.

            - `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.

            - `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.

            - `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.

            - `CONTEXT_DISALLOW` - The command could not be performed on the context.

            - `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.

            - `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.

            - `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.

            - `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.

            - `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.

            - `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.

            - `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.

            - `UNKNOWN` - Certain actions are restricted because of unknown reasons.
          type: string
        status:
          description: The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.
            Also returned in the response header.
          format: int32
          type: integer
      type: object
    PlaylistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject
      properties:
        collaborative:
          description: "`true` if the owner allows other users to modify the playlist."
          type: boolean
        description:
          description: The playlist description. *Only returned for modified, verified
            playlists, otherwise* `null`.
          type: string
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        followers:
          $ref: "#/components/schemas/FollowersObject"
        href:
          description: A link to the Web API endpoint providing full details of the
            playlist.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          type: string
        images:
          description: "Images for the playlist. The array may be empty or contain up to
            three images. The images are returned by size in descending order.
            See [Working with
            Playlists](https://developer.spotify.com/documentation/general/guid\
            es/working-with-playlists/). *Note: If returned, the source URL for
            the image (`url`) is temporary and will expire in less than a day.*"
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        name:
          description: The name of the playlist.
          type: string
        owner:
          $ref: "#/components/schemas/PublicUserObject"
        public:
          description: "The playlist's public/private status: `true` the playlist is
            public, `false` the playlist is private, `null` the playlist status
            is not relevant. For more about public/private status, see [Working
            with
            Playlists](https://developer.spotify.com/documentation/general/guid\
            es/working-with-playlists/)"
          type: boolean
        snapshot_id:
          description: The version identifier for the current playlist. Can be supplied in
            other requests to target a specific playlist version
          type: string
        tracks:
          description: Information about the tracks of the playlist. Note, a track object
            may be `null`. This can happen if a track is no longer available.
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/PlaylistTrackObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        type:
          description: 'The object type: "playlist"'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          type: string
      type: object
    PlaylistPagingObject:
      properties:
        playlists:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedPlaylistObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    PlaylistTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttrackobject
      properties:
        added_at:
          description: The date and time the track or episode was added. *Note that some
            very old playlists may return `null` in this field.*
          format: date-time
          type: string
        added_by:
          $ref: "#/components/schemas/PublicUserObject"
        is_local:
          description: Whether this track or episode is a [local
            file](https://developer.spotify.com/web-api/local-files-spotify-playlists/)
            or not.
          type: boolean
        track:
          description: Information about the track or episode.
          oneOf:
            - $ref: "#/components/schemas/TrackObject"
            - $ref: "#/components/schemas/EpisodeObject"
      type: object
    PlaylistTracksRefObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttracksrefobject
      properties:
        href:
          description: A link to the Web API endpoint where full details of the playlist's
            tracks can be retrieved.
          type: string
        total:
          description: Number of tracks in the playlist.
          format: int32
          type: integer
      type: object
    PrivateUserObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject
      properties:
        country:
          description: The country of the user, as set in the user's account profile. An
            [ISO 3166-1 alpha-2 country
            code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). *This field
            is only available when the current user has granted access to the
            [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
            scope.*
          type: string
        display_name:
          description: The name displayed on the user's profile. `null` if not available.
          type: string
        email:
          description: The user's email address, as entered by the user when creating
            their account. ***Important!** This email address is unverified;
            there is no proof that it actually belongs to the user.* *This field
            is only available when the current user has granted access to the
            [user-read-email](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
            scope.*
          type: string
        explicit_content:
          $ref: "#/components/schemas/ExplicitContentSettingsObject"
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        followers:
          $ref: "#/components/schemas/FollowersObject"
        href:
          description: A link to the Web API endpoint for this user.
          type: string
        id:
          description: The [Spotify user
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the user.
          type: string
        images:
          description: The user's profile image.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        product:
          description: "The user's Spotify subscription level: \"premium\", \"free\", etc.
            (The subscription level \"open\" can be considered the same as
            \"free\".) *This field is only available when the current user has
            granted access to the
            [user-read-private](https://developer.spotify.com/documentation/gen\
            eral/guides/authorization-guide/#list-of-scopes) scope.*"
          type: string
        type:
          description: 'The object type: "user"'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the user.
          type: string
      type: object
    PublicUserObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject
      properties:
        display_name:
          description: The name displayed on the user's profile. `null` if not available.
          type: string
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        followers:
          $ref: "#/components/schemas/FollowersObject"
        href:
          description: A link to the Web API endpoint for this user.
          type: string
        id:
          description: The [Spotify user
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for this user.
          type: string
        images:
          description: The user's profile image.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        type:
          description: 'The object type: "user"'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for this user.
          type: string
      type: object
    RecommendationSeedObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject
      properties:
        afterFilteringSize:
          description: The number of tracks available after min_\* and max_\* filters have
            been applied.
          format: int32
          type: integer
        afterRelinkingSize:
          description: The number of tracks available after relinking for regional
            availability.
          format: int32
          type: integer
        href:
          description: A link to the full track or artist data for this seed. For tracks
            this will be a link to a [Track
            Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject).
            For artists a link to [an Artist
            Object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).
            For genre seeds, this value will be `null`.
          type: string
        id:
          description: The id used to select this seed. This will be the same as the
            string used in the `seed_artists`, `seed_tracks` or `seed_genres`
            parameter.
          type: string
        initialPoolSize:
          description: The number of recommended tracks available for this seed.
          format: int32
          type: integer
        type:
          description: The entity type of this seed. One of `artist`, `track` or `genre`.
          type: string
      type: object
    RecommendationsObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-recommendationsobject
      properties:
        seeds:
          description: An array of [recommendation seed
            objects](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject).
          items:
            $ref: "#/components/schemas/RecommendationSeedObject"
          type: array
        tracks:
          description: An array of [track object
            (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject)
            ordered according to the parameters supplied.
          items:
            $ref: "#/components/schemas/SimplifiedTrackObject"
          type: array
      type: object
    ResumePointObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-resumepointobject
      properties:
        fully_played:
          description: Whether or not the episode has been fully played by the user.
          type: boolean
        resume_position_ms:
          description: The user's most recent position in the episode in milliseconds.
          format: int32
          type: integer
      type: object
    SavedAlbumObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject
      properties:
        added_at:
          description: "The date and time the album was saved Timestamps are returned in
            ISO 8601 format as Coordinated Universal Time (UTC) with a zero
            offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example,
            the date/time of an album release), an additional field indicates
            the precision; see for example, release_date in an album object."
          format: date-time
          type: string
        album:
          $ref: "#/components/schemas/AlbumObject"
      type: object
    SavedEpisodeObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject
      properties:
        added_at:
          description: "The date and time the episode was saved. Timestamps are returned
            in ISO 8601 format as Coordinated Universal Time (UTC) with a zero
            offset: YYYY-MM-DDTHH:MM:SSZ."
          format: date-time
          type: string
        episode:
          $ref: "#/components/schemas/EpisodeObject"
      type: object
    SavedShowObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject
      properties:
        added_at:
          description: "The date and time the show was saved. Timestamps are returned in
            ISO 8601 format as Coordinated Universal Time (UTC) with a zero
            offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example,
            the date/time of an album release), an additional field indicates
            the precision; see for example, release_date in an album object."
          format: date-time
          type: string
        show:
          $ref: "#/components/schemas/SimplifiedShowObject"
      type: object
    SavedTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject
      properties:
        added_at:
          description: "The date and time the track was saved. Timestamps are returned in
            ISO 8601 format as Coordinated Universal Time (UTC) with a zero
            offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example,
            the date/time of an album release), an additional field indicates
            the precision; see for example, release_date in an album object."
          format: date-time
          type: string
        track:
          $ref: "#/components/schemas/TrackObject"
      type: object
    SearchResponseObject:
      properties:
        album:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedAlbumObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        artist:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/ArtistObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        episode:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedEpisodeObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        playlist:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedPlaylistObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        show:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedShowObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        track:
          description: ""
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/TrackObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
      type: object
    SectionObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#section-object
      properties:
        confidence:
          description: The confidence, from 0.0 to 1.0, of the reliability of the
            section’s "designation".
          type: number
        duration:
          description: The duration (in seconds) of the section.
          type: number
        key:
          description: ""
          format: int32
          type: integer
        key_confidence:
          description: ""
          type: number
        loudness:
          description: The overall loudness of the section in decibels (dB). Loudness
            values are useful for comparing relative loudness of sections within
            tracks.
          type: number
        mode:
          description: ""
          format: int32
          type: integer
        mode_confidence:
          description: ""
          type: number
        start:
          description: The starting point (in seconds) of the section.
          type: number
        tempo:
          description: The overall estimated tempo of the section in beats per minute
            (BPM). In musical terminology, tempo is the speed or pace of a given
            piece and derives directly from the average beat duration.
          type: number
        tempo_confidence:
          description: ""
          type: number
        time_signature:
          description: ""
          format: int32
          type: integer
        time_signature_confidence:
          description: ""
          type: number
      type: object
    SegmentObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#segment-object
      properties:
        confidence:
          description: ""
          type: number
        duration:
          description: ""
          type: number
        loudness_end:
          description: ""
          type: number
        loudness_max:
          description: ""
          type: number
        loudness_max_time:
          description: ""
          type: number
        loudness_start:
          description: ""
          type: number
        pitches:
          description: ""
          items:
            type: number
          type: array
        start:
          description: ""
          type: number
        timbre:
          description: ""
          items:
            type: number
          type: array
      type: object
    ShowObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-showobject
      properties:
        available_markets:
          description: A list of the countries in which the show can be played, identified
            by their [ISO 3166-1
            alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        copyrights:
          description: The copyright statements of the show.
          items:
            $ref: "#/components/schemas/CopyrightObject"
          type: array
        description:
          description: A description of the show.
          type: string
        episodes:
          description: A list of the show's episodes.
          externalDocs:
            description: Find more info on the official Spotify Web API Reference
            url: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
          properties:
            href:
              description: A link to the Web API endpoint returning the full result of the
                request
              type: string
            items:
              description: The requested data.
              items:
                $ref: "#/components/schemas/SimplifiedEpisodeObject"
              type: array
            limit:
              description: The maximum number of items in the response (as set in the query or
                by default).
              format: int32
              type: integer
            next:
              description: URL to the next page of items. ( `null` if none)
              type: string
            offset:
              description: The offset of the items returned (as set in the query or by
                default)
              format: int32
              type: integer
            previous:
              description: URL to the previous page of items. ( `null` if none)
              type: string
            total:
              description: The total number of items available to return.
              format: int32
              type: integer
          type: object
        explicit:
          description: Whether or not the show has explicit content (true = yes it does;
            false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the show.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the show.
          type: string
        images:
          description: The cover art for the show in various sizes, widest first.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        is_externally_hosted:
          description: True if all of the show's episodes are hosted outside of Spotify's
            CDN. This field might be `null` in some cases.
          type: boolean
        languages:
          description: A list of the languages used in the show, identified by their [ISO
            639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        media_type:
          description: The media type of the show.
          type: string
        name:
          description: The name of the episode.
          type: string
        publisher:
          description: The publisher of the show.
          type: string
        type:
          description: 'The object type: "show".'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the show.
          type: string
      type: object
    ShowsObject:
      properties:
        shows:
          description: ""
          items:
            $ref: "#/components/schemas/SimplifiedShowObject"
          type: array
      type: object
    SimplifiedAlbumObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject
      properties:
        album_group:
          description: The field is present when getting an artist's albums. Possible
            values are "album", "single", "compilation", "appears_on". Compare
            to album_type this field represents relationship between the artist
            and the album.
          type: string
        album_type:
          description: 'The type of the album: one of "album", "single", or "compilation".'
          type: string
        artists:
          description: The artists of the album. Each artist object includes a link in
            `href` to more detailed information about the artist.
          items:
            $ref: "#/components/schemas/SimplifiedArtistObject"
          type: array
        available_markets:
          description: "The markets in which the album is available: [ISO 3166-1 alpha-2
            country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
            Note that an album is considered available in a market when at least
            1 of its tracks is available in that market."
          items:
            type: string
          type: array
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the album.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the album.
          type: string
        images:
          description: The cover art for the album in various sizes, widest first.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        name:
          description: The name of the album. In case of an album takedown, the value may
            be an empty string.
          type: string
        release_date:
          description: The date the album was first released, for example `1981`.
            Depending on the precision, it might be shown as `1981-12` or
            `1981-12-15`.
          type: string
        release_date_precision:
          description: "The precision with which `release_date` value is known: `year` ,
            `month` , or `day`."
          type: string
        restrictions:
          $ref: "#/components/schemas/AlbumRestrictionObject"
        type:
          description: 'The object type: "album"'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the album.
          type: string
      type: object
    SimplifiedArtistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedartistobject
      properties:
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the artist.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the artist.
          type: string
        name:
          description: The name of the artist.
          type: string
        type:
          description: 'The object type: `"artist"`'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the artist.
          type: string
      type: object
    SimplifiedEpisodeObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject
      properties:
        audio_preview_url:
          description: A URL to a 30 second preview (MP3 format) of the episode. `null` if
            not available.
          type: string
        description:
          description: A description of the episode.
          type: string
        duration_ms:
          description: The episode length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the episode has explicit content (true = yes it
            does; false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the episode.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the episode.
          type: string
        images:
          description: The cover art for the episode in various sizes, widest first.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        is_externally_hosted:
          description: True if the episode is hosted outside of Spotify's CDN.
          type: boolean
        is_playable:
          description: True if the episode is playable in the given market. Otherwise false.
          type: boolean
        language:
          description: "**Note: This field is deprecated and might be removed in the
            future. Please use the `languages` field instead.** The language
            used in the episode, identified by a [ISO
            639](https://en.wikipedia.org/wiki/ISO_639) code."
          type: string
        languages:
          description: A list of the languages used in the episode, identified by their
            [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        name:
          description: The name of the episode.
          type: string
        release_date:
          description: The date the episode was first released, for example
            `"1981-12-15"`. Depending on the precision, it might be shown as
            `"1981"` or `"1981-12"`.
          type: string
        release_date_precision:
          description: 'The precision with which `release_date` value is known: `"year"`,
            `"month"`, or `"day"`.'
          type: string
        resume_point:
          $ref: "#/components/schemas/ResumePointObject"
        type:
          description: 'The object type: "episode".'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the episode.
          type: string
      type: object
    SimplifiedPlaylistObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject
      properties:
        collaborative:
          description: "`true` if the owner allows other users to modify the playlist."
          type: boolean
        description:
          description: The playlist description. *Only returned for modified, verified
            playlists, otherwise* `null`.
          type: string
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the
            playlist.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          type: string
        images:
          description: "Images for the playlist. The array may be empty or contain up to
            three images. The images are returned by size in descending order.
            See [Working with
            Playlists](https://developer.spotify.com/documentation/general/guid\
            es/working-with-playlists/). *Note: If returned, the source URL for
            the image (`url`) is temporary and will expire in less than a day.*"
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        name:
          description: The name of the playlist.
          type: string
        owner:
          $ref: "#/components/schemas/PublicUserObject"
        public:
          description: "The playlist's public/private status: `true` the playlist is
            public, `false` the playlist is private, `null` the playlist status
            is not relevant. For more about public/private status, see [Working
            with
            Playlists](https://developer.spotify.com/documentation/general/guid\
            es/working-with-playlists/)"
          type: boolean
        snapshot_id:
          description: The version identifier for the current playlist. Can be supplied in
            other requests to target a specific playlist version
          type: string
        tracks:
          $ref: "#/components/schemas/PlaylistTracksRefObject"
        type:
          description: 'The object type: "playlist"'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the playlist.
          type: string
      type: object
    SimplifiedShowObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject
      properties:
        available_markets:
          description: A list of the countries in which the show can be played, identified
            by their [ISO 3166-1
            alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        copyrights:
          description: The copyright statements of the show.
          items:
            $ref: "#/components/schemas/CopyrightObject"
          type: array
        description:
          description: A description of the show.
          type: string
        explicit:
          description: Whether or not the show has explicit content (true = yes it does;
            false = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the show.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the show.
          type: string
        images:
          description: The cover art for the show in various sizes, widest first.
          items:
            $ref: "#/components/schemas/ImageObject"
          type: array
        is_externally_hosted:
          description: True if all of the show's episodes are hosted outside of Spotify's
            CDN. This field might be `null` in some cases.
          type: boolean
        languages:
          description: A list of the languages used in the show, identified by their [ISO
            639](https://en.wikipedia.org/wiki/ISO_639) code.
          items:
            type: string
          type: array
        media_type:
          description: The media type of the show.
          type: string
        name:
          description: The name of the episode.
          type: string
        publisher:
          description: The publisher of the show.
          type: string
        type:
          description: 'The object type: "show".'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the show.
          type: string
      type: object
    SimplifiedTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject
      properties:
        artists:
          description: The artists who performed the track. Each artist object includes a
            link in `href` to more detailed information about the artist.
          items:
            $ref: "#/components/schemas/SimplifiedArtistObject"
          type: array
        available_markets:
          description: A list of the countries in which the track can be played,
            identified by their [ISO 3166-1
            alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        disc_number:
          description: The disc number (usually `1` unless the album consists of more than
            one disc).
          format: int32
          type: integer
        duration_ms:
          description: The track length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the track has explicit lyrics ( `true` = yes it
            does; `false` = no it does not OR unknown).
          type: boolean
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          type: string
        is_local:
          description: Whether or not the track is from a local file.
          type: boolean
        is_playable:
          description: Part of the response when [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)
            is applied. If `true` , the track is playable in the given market.
            Otherwise `false`.
          type: boolean
        linked_from:
          $ref: "#/components/schemas/LinkedTrackObject"
        name:
          description: The name of the track.
          type: string
        preview_url:
          description: A URL to a 30 second preview (MP3 format) of the track.
          type: string
        restrictions:
          $ref: "#/components/schemas/TrackRestrictionObject"
        track_number:
          description: The number of the track. If an album has several discs, the track
            number is the number on the specified disc.
          format: int32
          type: integer
        type:
          description: 'The object type: "track".'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          type: string
      type: object
    SnapshotIdObject:
      properties:
        snapshot_id:
          description: The snapshot_id can be used to identify your playlist version in
            future requests.
          type: string
      type: object
    TimeIntervalObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#time-interval-object
      properties:
        confidence:
          description: The confidence, from 0.0 to 1.0, of the reliability of the interval.
          type: number
        duration:
          description: The duration (in seconds) of the time interval.
          type: number
        start:
          description: The starting point (in seconds) of the time interval.
          type: number
      type: object
    TrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-trackobject
      properties:
        album:
          $ref: "#/components/schemas/SimplifiedAlbumObject"
        artists:
          description: The artists who performed the track. Each artist object includes a
            link in `href` to more detailed information about the artist.
          items:
            $ref: "#/components/schemas/ArtistObject"
          type: array
        available_markets:
          description: A list of the countries in which the track can be played,
            identified by their [ISO 3166-1
            alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
          items:
            type: string
          type: array
        disc_number:
          description: The disc number (usually `1` unless the album consists of more than
            one disc).
          format: int32
          type: integer
        duration_ms:
          description: The track length in milliseconds.
          format: int32
          type: integer
        explicit:
          description: Whether or not the track has explicit lyrics ( `true` = yes it
            does; `false` = no it does not OR unknown).
          type: boolean
        external_ids:
          $ref: "#/components/schemas/ExternalIdObject"
        external_urls:
          $ref: "#/components/schemas/ExternalUrlObject"
        href:
          description: A link to the Web API endpoint providing full details of the track.
          type: string
        id:
          description: The [Spotify
            ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          type: string
        is_local:
          description: Whether or not the track is from a local file.
          type: boolean
        is_playable:
          description: Part of the response when [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)
            is applied. If `true` , the track is playable in the given market.
            Otherwise `false`.
          type: boolean
        linked_from:
          $ref: "#/components/schemas/LinkedTrackObject"
        name:
          description: The name of the track.
          type: string
        popularity:
          description: >-
            The popularity of the track. The value will be between 0 and 100,
            with 100 being the most popular.  

            The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.  

            Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.
          format: int32
          type: integer
        preview_url:
          description: A link to a 30 second preview (MP3 format) of the track. Can be
            `null`
          type: string
        restrictions:
          $ref: "#/components/schemas/TrackRestrictionObject"
        track_number:
          description: The number of the track. If an album has several discs, the track
            number is the number on the specified disc.
          format: int32
          type: integer
        type:
          description: 'The object type: "track".'
          type: string
        uri:
          description: The [Spotify
            URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
            for the track.
          type: string
      type: object
    TrackRestrictionObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject
      properties:
        reason:
          description: >-
            The reason for the restriction. Supported values:  


            - `market` - The content item is not available in the given market.  

            - `product` - The content item is not available for the user's subscription type.  

            - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
              Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.
          type: string
      type: object
    TracksObject:
      properties:
        tracks:
          description: ""
          items:
            $ref: "#/components/schemas/TrackObject"
          type: array
      type: object
    TuneableTrackObject:
      externalDocs:
        description: Find more info on the official Spotify Web API Reference
        url: https://developer.spotify.com/documentation/web-api/reference/#object-tuneabletrackobject
      properties:
        acousticness:
          description: A confidence measure from 0.0 to 1.0 of whether the track is
            acoustic. 1.0 represents high confidence the track is acoustic.
          type: number
        danceability:
          description: Danceability describes how suitable a track is for dancing based on
            a combination of musical elements including tempo, rhythm stability,
            beat strength, and overall regularity. A value of 0.0 is least
            danceable and 1.0 is most danceable.
          type: number
        duration_ms:
          description: The duration of the track in milliseconds.
          format: int32
          type: integer
        energy:
          description: Energy is a measure from 0.0 to 1.0 and represents a perceptual
            measure of intensity and activity. Typically, energetic tracks feel
            fast, loud, and noisy. For example, death metal has high energy,
            while a Bach prelude scores low on the scale. Perceptual features
            contributing to this attribute include dynamic range, perceived
            loudness, timbre, onset rate, and general entropy.
          type: number
        instrumentalness:
          description: Predicts whether a track contains no vocals. "Ooh" and "aah" sounds
            are treated as instrumental in this context. Rap or spoken word
            tracks are clearly "vocal". The closer the instrumentalness value is
            to 1.0, the greater likelihood the track contains no vocal content.
            Values above 0.5 are intended to represent instrumental tracks, but
            confidence is higher as the value approaches 1.0.
          type: number
        key:
          description: The key the track is in. Integers map to pitches using standard
            [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class).
            E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
          format: int32
          type: integer
        liveness:
          description: Detects the presence of an audience in the recording. Higher
            liveness values represent an increased probability that the track
            was performed live. A value above 0.8 provides strong likelihood
            that the track is live.
          type: number
        loudness:
          description: The overall loudness of a track in decibels (dB). Loudness values
            are averaged across the entire track and are useful for comparing
            relative loudness of tracks. Loudness is the quality of a sound that
            is the primary psychological correlate of physical strength
            (amplitude). Values typical range between -60 and 0 db.
          type: number
        mode:
          description: Mode indicates the modality (major or minor) of a track, the type
            of scale from which its melodic content is derived. Major is
            represented by 1 and minor is 0.
          format: int32
          type: integer
        popularity:
          description: "The popularity of the track. The value will be between 0 and 100,
            with 100 being the most popular. The popularity is calculated by
            algorithm and is based, in the most part, on the total number of
            plays the track has had and how recent those plays are. *Note: When
            applying track relinking via the `market` parameter, it is expected
            to find relinked tracks with popularities that do not match `min_*`,
            `max_*`and `target_*` popularities. These relinked tracks are
            accurate replacements for unplayable tracks with the expected
            popularity scores. Original, non-relinked tracks are available via
            the `linked_from` attribute of the [relinked track
            response](https://developer.spotify.com/documentation/general/guide\
            s/track-relinking-guide).*"
          type: number
        speechiness:
          description: Speechiness detects the presence of spoken words in a track. The
            more exclusively speech-like the recording (e.g. talk show, audio
            book, poetry), the closer to 1.0 the attribute value. Values above
            0.66 describe tracks that are probably made entirely of spoken
            words. Values between 0.33 and 0.66 describe tracks that may contain
            both music and speech, either in sections or layered, including such
            cases as rap music. Values below 0.33 most likely represent music
            and other non-speech-like tracks.
          type: number
        tempo:
          description: The overall estimated tempo of a track in beats per minute (BPM).
            In musical terminology, tempo is the speed or pace of a given piece
            and derives directly from the average beat duration.
          type: number
        time_signature:
          description: An estimated overall time signature of a track. The time signature
            (meter) is a notational convention to specify how many beats are in
            each bar (or measure).
          format: int32
          type: integer
        valence:
          description: A measure from 0.0 to 1.0 describing the musical positiveness
            conveyed by a track. Tracks with high valence sound more positive
            (e.g. happy, cheerful, euphoric), while tracks with low valence
            sound more negative (e.g. sad, depressed, angry).
          type: number
      type: object
  securitySchemes:
    spotify_auth:
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.spotify.com/authorize
          scopes:
            app-remote-control: Remote control playback of Spotify. This scope is currently
              available to Spotify iOS and Android SDKs.
            playlist-modify-private: Write access to a user's private playlists.
            playlist-modify-public: Write access to a user's public playlists.
            playlist-read-collaborative: Include collaborative playlists when requesting a user's playlists.
            playlist-read-private: Read access to user's private playlists.
            streaming: Control playback of a Spotify track. This scope is currently
              available to the Web Playback SDK. The user must have a Spotify
              Premium account.
            ugc-image-upload: Write access to user-provided images.
            user-follow-modify: Write/delete access to the list of artists and other users
              that the user follows.
            user-follow-read: Read access to the list of artists and other users that the
              user follows.
            user-library-modify: Write/delete access to a user's "Your Music" library.
            user-library-read: Read access to a user's library.
            user-modify-playback-state: Write access to a user’s playback state
            user-read-currently-playing: Read access to a user’s currently playing content.
            user-read-email: Read access to user’s email address.
            user-read-playback-position: Read access to a user’s playback position in a content.
            user-read-playback-state: Read access to a user’s player state.
            user-read-private: Read access to user’s subscription details (type of user account).
            user-read-recently-played: Read access to a user’s recently played tracks.
            user-top-read: Read access to a user's top artists and tracks.
          tokenUrl: https://accounts.spotify.com/api/token
      type: oauth2
